/* tslint:disable */
/**
 * @file Source code generated by gulp-ps-code.
 * @version 1.1
 */
export var PowerShellScripts;
(function (PowerShellScripts) {
    'use strict';
    var module = 'Microsoft.SME.Shell';
    PowerShellScripts.Get_ClusterInventory = {
        module: module,
        command: 'Get-ClusterInventory',
        script: "##Get-ClusterInventory##:Get-ClusterInventory.ps1\nimport-module CimCmdlets\n$computerSystem = Get-CimInstance Win32_ComputerSystem\n$computerName = $computerSystem.DNSHostName\nif ($computerName -eq $null) {\n$computerName = $computerSystem.Name\n}\n$isClusterCmdletAvailable = $false;\nif (Get-Command \"Get-Cluster\" -ErrorAction SilentlyContinue) {\n$isClusterCmdletAvailable = $true;\n}\n$cluster = Get-CimInstance -Namespace root/mscluster MSCluster_Cluster\n$clusterFqdn = $cluster.fqdn\n$isS2dEnabled = $false\nif ($cluster.S2DEnabled -eq 1) {\n$isS2dEnabled = $true\n}\n$isClusterHealthCmdletAvailable = $false\nif (Get-Command -Name \"Get-HealthFault\" -ErrorAction SilentlyContinue) {\n$isClusterHealthCmdletAvailable = $true\n}\n$isBritannicaEnabled = $false;\nif (Get-CimInstance -Namespace root/sddc -ClassName __NAMESPACE -ErrorAction SilentlyContinue) {\n$isBritannicaEnabled = $true\n}\n$result = New-Object PSObject\n$result | Add-Member -MemberType NoteProperty -Name \u0027Fqdn\u0027 -Value $clusterFqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsS2DEnabled\u0027 -Value $isS2dEnabled\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsClusterHealthCmdletAvailable\u0027 -Value $isClusterHealthCmdletAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsBritannicaEnabled\u0027 -Value $isBritannicaEnabled\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsClusterCmdletAvailable\u0027 -Value $isClusterCmdletAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027CurrentClusterNode\u0027 -Value $computerName\n$result\n"
    };
    PowerShellScripts.Get_ClusterNodes = {
        module: module,
        command: 'Get-ClusterNodes',
        script: "##Get-ClusterNodes##:Get-ClusterNodes.ps1\nimport-module CimCmdlets\n$cmdletInfo = Get-Command \u0027Get-ClusterNode\u0027 -ErrorAction SilentlyContinue\n$isClusterCmdletAvailable = ($cmdletInfo -and $cmdletInfo.Name -eq \"Get-ClusterNode\")\nif ($isClusterCmdletAvailable) {\n$clusterNodes = Get-ClusterNode | Select-Object DrainStatus, DynamicWeight, Name, NodeWeight, FaultDomain, State\n}\nelse {\n$clusterNodes = Get-CimInstance -Namespace root/mscluster MSCluster_Node -ErrorAction Stop\n}\n$clusterNodeMap = @{}\nforeach ($clusterNode in $clusterNodes) {\n$clusterNodeName = $clusterNode.Name\nif ($clusterNode -ne $null) {\n$clusterNodeName = $clusterNodeName.ToLower()\n}\n$clusterNodeFqdn = ([System.Net.Dns]::GetHostEntry($clusterNodeName)).HostName\n$clusterNodeResult = New-Object PSObject\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027FullyQualifiedDomainName\u0027 -Value $clusterNodeFqdn\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027Name\u0027 -Value $clusterNodeName\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027DynamicWeight\u0027 -Value $clusterNode.DynamicWeight\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027NodeWeight\u0027 -Value $clusterNode.NodeWeight\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027FaultDomain\u0027 -Value $clusterNode.FaultDomain\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027State\u0027 -Value $clusterNode.State\nif ($isClusterCmdletAvailable) {\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027DrainStatus\u0027 -Value $clusterNode.DrainStatus\n}\nelse {\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027DrainStatus\u0027 -Value $clusterNode.NodeDrainStatus\n}\n$clusterNodeMap.Add($clusterNodeName, $clusterNodeResult)\n}\n$clusterNodeMap\n"
    };
    PowerShellScripts.Get_ServerInventory = {
        module: module,
        command: 'Get-ServerInventory',
        script: "##Get-ServerInventory##:Get-ServerInventory.ps1\nimport-module CimCmdlets\n$isAdministrator = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")\n$operatingSystem = Get-CimInstance Win32_OperatingSystem\n$computerSystem = Get-CimInstance Win32_ComputerSystem\n$computerName = $computerSystem.DNSHostName\nif ($computerName -eq $null) {\n$computerName = $computerSystem.Name\n}\n$fqdn = ([System.Net.Dns]::GetHostEntry($computerName)).HostName\n$namespaces = Get-CimInstance -Namespace root/microsoft/windows -ClassName __NAMESPACE\n$managementToolsAvailable = ($namespaces | Where-Object { $_.Name -ieq \"ManagementTools\" -or $_Name -ieq \"ManagementTools2\" }) -ne $null\n$serverManagerAvailable = ($namespaces | Where-Object { $_.Name -ieq \"ServerManager\" }) -ne $null\n$isCluster = $false\n$clusterFqdn = $null\n$isWmfInstalled = $false\n$operatingSystemVersion = $OperatingSystem.Version;\n$windows2016Version = [Version]\u002710.0\u0027;\n$windows2012Version = [Version]\u00276.2\u0027;\nif ($operatingSystemVersion -ge $windows2016Version) {\n$isWmfInstalled = $true;\n}\nelseif ($operatingSystemVersion -ge $windows2012Version) {\n$registryKey = \u0027HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowerShellEngine\u0027;\n$registryKeyValue = Get-ItemProperty -Path $registryKey -Name PowerShellVersion -ErrorAction SilentlyContinue;\nif ($registryKeyValue -and ($registryKeyValue.Length -ne 0)) {\n$installedWmfVersion = [Version]$registryKeyValue.PowerShellVersion;\nif ($installedWmfVersion -ge [Version]\u00275.0\u0027) {\n$isWmfInstalled = $true;\n}\n}\n}\n$isTsdbEnabled = $false;\nif (Get-Command \"Get-HealthMetric\" -ErrorAction SilentlyContinue) {\n$isTsdbEnabled = $true;\n}\n$getVmCommand = Get-Command \"Get-VM\" -ErrorAction SilentlyContinue\n$isHyperVPowershellInstalled = $getVmCommand -and $getVmCommand.Name -eq \"Get-VM\"\n$vmmsService = Get-Service -Name \"VMMS\" -ErrorAction SilentlyContinue;\n$isHyperVRoleInstalled = $vmmsService -and $vmmsService.Name -eq \"VMMS\"\ntry {\n$cluster = Get-CimInstance -Namespace root/mscluster MSCluster_Cluster -ErrorAction Stop\n$isCluster = $true\n$clusterFqdn = $cluster.fqdn\n}\ncatch {\n}\n$result = New-Object PSObject\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsAdministrator\u0027 -Value $isAdministrator\n$result | Add-Member -MemberType NoteProperty -Name \u0027OperatingSystem\u0027 -Value $operatingSystem\n$result | Add-Member -MemberType NoteProperty -Name \u0027ComputerSystem\u0027 -Value $computerSystem\n$result | Add-Member -MemberType NoteProperty -Name \u0027Fqdn\u0027 -Value $fqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsManagementToolsAvailable\u0027 -Value $managementToolsAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsServerManagerAvailable\u0027 -Value $serverManagerAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsCluster\u0027 -Value $isCluster\n$result | Add-Member -MemberType NoteProperty -Name \u0027ClusterFqdn\u0027 -Value $clusterFqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsWmfInstalled\u0027 -Value $isWmfInstalled\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsTsdbEnabled\u0027 -Value $isTsdbEnabled\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsHyperVRoleInstalled\u0027 -Value $isHyperVRoleInstalled\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsHyperVPowershellInstalled\u0027 -Value $isHyperVPowershellInstalled\n$result\n"
    };
    PowerShellScripts.Get_CimFindProcessWithName = {
        module: module,
        command: 'Get-CimFindProcessWithName',
        script: "##Get-CimFindProcessWithName##:Get-CimFindProcessWithName.ps1\nParam(\n[string]$Name\n)\nGet-CimInstance -Namespace root/cimv2 -Query \"Select * from Win32_Process where Name=\u0027$Name\u0027\"\n"
    };
    PowerShellScripts.Get_CimRegistryKey = {
        module: module,
        command: 'Get-CimRegistryKey',
        script: "##Get-CimRegistryKey##:Get-CimRegistryKey.ps1\nParam(\n[string]$Name\n)\n$keyInstance = New-CimInstance -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryKey -Key @(\u0027Name\u0027) -Property @{Name=$Name;} -ClientOnly\nGet-CimInstance $keyInstance\n"
    };
    PowerShellScripts.Get_CimRegistryValue = {
        module: module,
        command: 'Get-CimRegistryValue',
        script: "##Get-CimRegistryValue##:Get-CimRegistryValue.ps1\nParam(\n[string]$Name\n)\nInvoke-CimMethod -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryValue -MethodName GetValue -Arguments @{Name=$Name;}\n"
    };
    PowerShellScripts.Get_CimRegistryValuesOnKey = {
        module: module,
        command: 'Get-CimRegistryValuesOnKey',
        script: "##Get-CimRegistryValuesOnKey##:Get-CimRegistryValuesOnKey.ps1\nParam(\n[string]$Name\n)\n$keyInstance = New-CimInstance -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryKey -Key @(\u0027Name\u0027) -Property @{Name=$Name;} -ClientOnly\nInvoke-CimMethod $keyInstance -MethodName GetValues\n"
    };
    PowerShellScripts.Get_CimWin32ComputerSystem = {
        module: module,
        command: 'Get-CimWin32ComputerSystem',
        script: "##Get-CimWin32ComputerSystem##:Get-CimWin32ComputerSystem.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_ComputerSystem\n"
    };
    PowerShellScripts.Get_CimWin32LogicalDisk = {
        module: module,
        command: 'Get-CimWin32LogicalDisk',
        script: "##Get-CimWin32LogicalDisk##:Get-CimWin32LogicalDisk.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_LogicalDisk\n"
    };
    PowerShellScripts.Get_CimWin32NetworkAdapter = {
        module: module,
        command: 'Get-CimWin32NetworkAdapter',
        script: "##Get-CimWin32NetworkAdapter##:Get-CimWin32NetworkAdapter.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_NetworkAdapter\n"
    };
    PowerShellScripts.Get_CimWin32OperatingSystem = {
        module: module,
        command: 'Get-CimWin32OperatingSystem',
        script: "##Get-CimWin32OperatingSystem##:Get-CimWin32OperatingSystem.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_OperatingSystem\n"
    };
    PowerShellScripts.Get_CimWin32PhysicalMemory = {
        module: module,
        command: 'Get-CimWin32PhysicalMemory',
        script: "##Get-CimWin32PhysicalMemory##:Get-CimWin32PhysicalMemory.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_PhysicalMemory\n"
    };
    PowerShellScripts.Get_CimWin32Processor = {
        module: module,
        command: 'Get-CimWin32Processor',
        script: "##Get-CimWin32Processor##:Get-CimWin32Processor.ps1\nGet-CimInstance -Namespace root/cimv2 -ClassName Win32_Processor\n"
    };
    PowerShellScripts.New_CimRegistryStringValue = {
        module: module,
        command: 'New-CimRegistryStringValue',
        script: "##New-CimRegistryStringValue##:New-CimRegistryStringValue.ps1\nParam(\n[string]$Name,\n[string]$Data,\n[System.Uint32]$Type\n)\nNew-CimInstance -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryString -Key @(\u0027Name\u0027) -Property @{Name=$Name;Data=$Data;Type=$Type;}\n"
    };
    PowerShellScripts.Remove_CimRegistryStringValue = {
        module: module,
        command: 'Remove-CimRegistryStringValue',
        script: "##Remove-CimRegistryStringValue##:Remove-CimRegistryStringValue.ps1\nParam(\n[string]$Name\n)\n$instance = New-CimInstance -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryString -Key @(\u0027Name\u0027) -Property @{Name=$Name;} -ClientOnly\nRemove-CimInstance $instance\n"
    };
    PowerShellScripts.Set_CimRegistryStringValue = {
        module: module,
        command: 'Set-CimRegistryStringValue',
        script: "##Set-CimRegistryStringValue##:Set-CimRegistryStringValue.ps1\nParam(\n[string]$Name,\n[string]$Data\n)\n$instance = New-CimInstance -Namespace root/microsoft/windows/managementtools -ClassName MSFT_MTRegistryString -Key @(\u0027Name\u0027) -Property @{Name=$Name;} -ClientOnly\n$instance = Get-CimInstance $instance\n$instance.Data=$Data\nSet-CimInstance $instance\n"
    };
})(PowerShellScripts || (PowerShellScripts = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlZC9wb3dlcnNoZWxsLXNjcmlwdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCOzs7R0FHRztBQUNILE1BQU0sS0FBUSxpQkFBaUIsQ0FvRjlCO0FBcEZELFdBQWMsaUJBQWlCO0lBQzNCLFlBQVksQ0FBQTtJQUVaLElBQU0sTUFBTSxHQUFHLHFCQUFxQixDQUFDO0lBQ3hCLHNDQUFvQixHQUFHO1FBQ2hDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixNQUFNLEVBQUUsMmtEQUEya0Q7S0FDdGxELENBQUE7SUFDWSxrQ0FBZ0IsR0FBRztRQUM1QixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsTUFBTSxFQUFFLHExREFBcTFEO0tBQ2gyRCxDQUFBO0lBQ1kscUNBQW1CLEdBQUc7UUFDL0IsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLE1BQU0sRUFBRSx1Z0hBQXVnSDtLQUNsaEgsQ0FBQTtJQUNZLDRDQUEwQixHQUFHO1FBQ3RDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxNQUFNLEVBQUUsc01BQXNNO0tBQ2pOLENBQUE7SUFDWSxvQ0FBa0IsR0FBRztRQUM5QixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsTUFBTSxFQUFFLHVSQUF1UjtLQUNsUyxDQUFBO0lBQ1ksc0NBQW9CLEdBQUc7UUFDaEMsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLE1BQU0sRUFBRSxrT0FBa087S0FDN08sQ0FBQTtJQUNZLDRDQUEwQixHQUFHO1FBQ3RDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxNQUFNLEVBQUUsOFRBQThUO0tBQ3pVLENBQUE7SUFDWSw0Q0FBMEIsR0FBRztRQUN0QyxNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSw0QkFBNEI7UUFDckMsTUFBTSxFQUFFLHdJQUF3STtLQUNuSixDQUFBO0lBQ1kseUNBQXVCLEdBQUc7UUFDbkMsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLE1BQU0sRUFBRSwrSEFBK0g7S0FDMUksQ0FBQTtJQUNZLDRDQUEwQixHQUFHO1FBQ3RDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxNQUFNLEVBQUUsd0lBQXdJO0tBQ25KLENBQUE7SUFDWSw2Q0FBMkIsR0FBRztRQUN2QyxNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsTUFBTSxFQUFFLDJJQUEySTtLQUN0SixDQUFBO0lBQ1ksNENBQTBCLEdBQUc7UUFDdEMsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLE1BQU0sRUFBRSx3SUFBd0k7S0FDbkosQ0FBQTtJQUNZLHVDQUFxQixHQUFHO1FBQ2pDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxNQUFNLEVBQUUseUhBQXlIO0tBQ3BJLENBQUE7SUFDWSw0Q0FBMEIsR0FBRztRQUN0QyxNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSw0QkFBNEI7UUFDckMsTUFBTSxFQUFFLDhTQUE4UztLQUN6VCxDQUFBO0lBQ1ksK0NBQTZCLEdBQUc7UUFDekMsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsK0JBQStCO1FBQ3hDLE1BQU0sRUFBRSw2U0FBNlM7S0FDeFQsQ0FBQTtJQUNZLDRDQUEwQixHQUFHO1FBQ3RDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxNQUFNLEVBQUUsaVhBQWlYO0tBQzVYLENBQUE7QUFDTCxDQUFDLEVBcEZhLGlCQUFpQixLQUFqQixpQkFBaUIsUUFvRjlCIiwiZmlsZSI6InBvd2Vyc2hlbGwtc2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiJDOi9CQS80NDQvcy9pbmxpbmVTcmMvIn0=