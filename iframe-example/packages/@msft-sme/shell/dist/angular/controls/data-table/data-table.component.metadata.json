[{"__symbolic":"module","version":3,"metadata":{"DataTableComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-data-table","styles":["\n      :host {\n          width: 100%;\n          display: flex;\n          flex-wrap: nowrap;\n          flex-direction: column;\n          align-content: stretch;\n          align-items: stretch;\n          justify-content: flex-start;\n          overflow: hidden;\n      }\n\n\n      /* Dont override absolute positioning. This will become unecesary after removing css file. */\n\n      :host:not(.sme-layout-absolute) {\n          position: relative;\n      }\n\n      th {\n          height: 27px;\n      }\n\n      .header.selectable th {\n          cursor: pointer;\n      }\n\n      .header.selectable th:hover,\n      .header.selectable.has-multiple-selection table thead tr th.first .datatable-checkbox:hover {\n          background: #f8f8f8;\n      }\n\n      th .sme-icon:before {\n          font-size: 11px;\n      }\n\n      .header table thead tr th.first:hover {\n          background: none;\n          cursor: default;\n      }\n\n      .header table thead tr th.first .datatable-checkbox {\n          display: none;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first .datatable-checkbox {\n          display: block;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first,\n      .content .item.no-data .prefix {\n          width: 26px;\n      }\n\n      .header.has-multiple-selection table thead tr th.first,\n      .content.has-multiple-selection .item td.first,\n      .content.has-multiple-selection .item.no-data .prefix {\n          width: 26px;\n          padding-left: 0;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item td.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item.no-data .prefix {\n          width: 47px;    \n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first {\n          padding-left: 29px;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first {\n          display: none;\n      }\n\n      .header.selectable.show-left-margin table thead tr th.first,\n      .content.selectable.show-left-margin .item td.first {\n          display: table-cell;\n      }\n\n\n      /* .header table thead tr th.first,\n      .item td.first .sme-table-cell {\n          padding: 0;\n      } */\n\n      .item td.first .datatable-checkbox, .item td.first .datatable-checkbox input {\n          display: none;\n      }\n\n      .tree .item td.first-data-column .datatable-checkbox {\n          visibility: hidden;\n      }\n\n      .tree .item.checked td.first-data-column .datatable-checkbox,\n      .tree .item td.first-data-column:hover .datatable-checkbox {\n          visibility: visible;\n      }\n\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox,\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox input,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox input {\n          display: block;\n      }\n\n      .item.no-data .prefix {\n          float: left;\n      }\n\n      .item.no-data .sme-table-cell {\n          padding: 0 8px;\n      }\n\n      .item.group-header .sme-table-cell:first-of-type .sme-icon:before {\n          font-size: 10px;\n          line-height: 10px;\n          margin-top: -3px;\n          margin-right: 3px;\n      }\n\n      .item.group-item .first-data-column .sme-table-cell {\n          padding-left: 26px;\n      }\n\n      .header table.sme-table-virtualized th:first-of-type {\n          padding-left: 8px;\n          padding-right: 8px;\n      }\n\n      .header.has-multiple-selection table.sme-table-virtualized th:first-of-type,\n      .content.has-multiple-selection table.sme-table-virtualized td:first-of-type .sme-table-cell {\n          padding-left: 29px;\n          padding-right: 0px;\n      }\n\n      /* .header table thead tr th {\n          padding: 0 8px;\n      } */\n\n      .header {\n          flex: 0 0 auto;\n          /* border-bottom: solid 1px #ddd; */\n          /* background: white; */\n          position: absolute;\n          margin-top: -1px;\n          z-index: 1;\n      }\n\n      .header.is-scrolled {\n          box-shadow: 0px -1px 7px #999;\n      }\n\n      div.content {\n          flex: 1 1 auto;\n          position: relative;\n          margin-top: 27px;\n          margin-left: 0;\n      }\n\n      .content.no-header {\n          margin-top: 0;\n      }\n\n      .content .scroll-container.sme-layout-absolute.sme-position-inset-none .scroll-data {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          overflow: hidden;\n          border-collapse: collapse;\n      }\n\n      .content .scroll-container {\n          overflow-x: hidden;\n          overflow-y: hidden;\n      }\n\n      .content .scroll-container.should-scroll{\n          overflow-y: auto;\n      }\n\n      .content .scroll-body {\n          position: relative;\n          overflow: hidden;\n          width: 100%;\n      }\n\n      .sme-table-cell {\n          height: 30px;\n          line-height: 30px;\n          font-size: 12px;\n          overflow: hidden;\n      }\n\n      table.sme-table-virtualized td .sme-table-cell,\n      table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: none;\n      }\n\n      .show-grid table.sme-table-virtualized td .sme-table-cell,\n      .show-grid table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: solid 1px #eee;\n      } \n\n      .content.selectable .item.data {\n          cursor: pointer;\n      }\n\n      .content.selectable .item.data:hover {\n          background: #f2fbfe;\n      }\n\n      .item.data.selected, .content.selectable .item.data.selected:hover {\n          background: #E6F7FE;\n      }\n\n      .item .sme-table-cell {\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          /* padding: 0 8px; */\n      }\n\n      :host>>>.scrollbar-measure {\n          width: 100px;\n          height: 100px;\n          overflow: scroll;\n          position: absolute;\n          top: -9999px;\n      }\n\n      .datatable-checkbox {\n          width: 100%;\n          position: relative;\n          height: 30px;\n      }\n\n      .tree .datatable-checkbox-container{\n          width: 24px;\n          display:block;\n          float: left;    \n          padding-left:4px;\n          padding-right:4px;\n      }\n\n      .tree .datatable-checkbox input {\n          visibility: hidden;    \n      }\n\n      .tree .datatable-checkbox:hover input{\n          visibility: visible;\n      }\n\n      .datatable-checkbox label {\n          width: 12px;\n          height: 12px;\n          cursor: pointer;\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background: white;\n          border: solid 1px #686868;\n      }\n\n      .datatable-checkbox input[type=checkbox]:hover+label {\n          background: rgb(242, 251, 254);\n      }\n\n      .datatable-checkbox input[type=checkbox] {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          margin: 0;\n          opacity: 0;\n          cursor: pointer;\n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label {\n          background: none;\n          border: solid 1px transparent;\n      }\n\n      .datatable-checkbox input[type=checkbox]:focus+label {\n          outline: rgba(0, 0, 0, .8) dashed 1px;    \n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label:after {\n          content: '\\E8FB';\n          font-family: Server-MDL2;\n          position: absolute;\n          top: 0;\n          line-height: 12px;\n      }\n\n      .loading-indicator {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell {\n          float: left;\n          height: 30px;    \n      }\n\n      .tree .scroll-data .first-data-column .sme-table-cell {\n          padding-left: 0;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .sme-icon:before {\n          margin-top: -4px;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .placeholder {\n          display: inline-block;\n          width: 16px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          visibility: hidden;    \n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          margin-left: 2px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          visibility: visible;\n          float:left;\n          width: 24px;\n          text-align: center;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          width: 10px;\n          margin-left: 5px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .placeholder {\n          display: block;\n          width: 24px;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .placeholder{\n          width: 10px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .placeholder {\n          display: none;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon:before {\n          display: inline-block;\n          font-size: 10px;\n          line-height: 30px;\n          margin-right: 3px;\n          margin-top: 0;\n      }\n    "],"template":"\n      <div *ngIf=\"showHeader\" class=\"header sme-focus-zone\" #header [ngClass]=\"{'is-scrolled':isScrolledDown, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'show-left-margin':showLeftMargin, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <table #headerTable class=\"sme-table-virtualized\" [attr.aria-labelledby]=\"tableAriaLabelledBy\" [attr.aria-rowcount]=\"renderedItems.length\"\n              [attr.aria-colcount]=\"columns.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n              <thead>\n                  <tr tabindex=\"0\">\n                      <th class=\"first\">\n                          <div class=\"datatable-checkbox\" *ngIf=\"selectionMode==='multiple'\">\n                              <input type=\"checkbox\" [checked]=\"shouldAllItemCheckBoxChecked()\" (change)=\"onAllItemCheckBoxClicked()\" />\n                              <label></label>\n                          </div>\n                      </th>\n                      <th tabindex=\"0\" *ngFor=\"let column of columns\" (click)=\"clickColumn(column)\" [hidden]=\"column===groupColumn\" [ngStyle]=\"{'width':column.width}\"\n                          class=\"{{column.styleClass}}\" [attr.aria-sort]=\"getAriaSortAttributeValue(column)\">\n                          <span class=\"columnName\">{{column.header}}</span>\n                          <span class=\"sortIcon sme-icon\" [ngClass]=\"{'sme-icon-up':column.sortMode===sortModeEnum.Ascend,'sme-icon-down':column.sortMode===sortModeEnum.Descend}\"></span>\n                      </th>\n                  </tr>\n              </thead>\n          </table>\n      </div>\n      <div class=\"content sme-focus-zone\" #content [ngClass]=\"{'is-busy':isBusy, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'no-header':!showHeader, 'show-left-margin':showLeftMargin, 'tree':showAsTree, 'show-grid':showGrid, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <div class=\"loading-indicator\" *ngIf=\"isBusy\">\n              <sme-loading-wheel></sme-loading-wheel>\n          </div>\n          <div class=\"scroll-container\" [ngClass]=\"{'sme-layout-absolute sme-position-inset-none': scrollable, 'should-scroll': shouldScroll}\"\n              #scrollContainer>\n              <div class=\"item no-data\" *ngIf=\"renderedItems.length===0 && !lazyLoad\">\n                  <div class=\"prefix sme-table-cell\">&nbsp;</div>\n                  <div class=\"sme-table-cell\">{{getPlaceholderMessage()}}</div>\n              </div>\n              <div class=\"scroll-body\" #scrollBody>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollAboveData>\n                      <tbody>\n                          <tr *ngFor=\"let renderedItem of renderedItemsAboveViewPort; let rowIndex = index\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || column===groupColumn\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">\n                                      {{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollData [attr.aria-rowcount]=\"renderedItems.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n                      <tbody>\n                          <tr (keydown)=\"onContentTablePressed($event)\" *ngFor=\"let renderedItem of renderedItemsInAndBelowViewPort; let rowIndex = index\"\n                              (click)=\"selectItem($event, renderedItem)\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\"\n                              [attr.tabindex]=\"renderedItem.index >=0 ? 0 : undefined\" (dblclick)=\"doubleClickRow($event,renderedItem)\"\n                              (focus)=\"onContentItemFocused($event)\" (focusin)=\"onContentItemFocused($event)\" (focusout)=\"onContentItemBlurred($event)\"\n                              [attr.data-rendered-item-index]=\"renderedItem.index\" [attr.aria-rowindex]=\"renderedItem.index\" [attr.aria-selected]=\"isItemSelected(renderedItem) ?'true': undefined\"\n                              role=\"row\" [attr.aria-expanded]=\"getAriaExpandedAttributeValue(renderedItem)\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || (renderedItem.type!=renderedItemTypeEnum.GroupHeader && column===groupColumn)\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">{{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}</div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                          <tr class=\"item\" #tempRow>\n                              <td>\n                                  <div class=\"sme-table-cell\">&nbsp;</div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </div>\n              <div #lastFocusableShadowElement class=\"sme-focus-zone last-focusable-shadow-element\" (focus)=\"onLastFocusableShadowElementFocused($event)\" tabindex=\"0\"></div>\n          </div>\n      </div>\n    "}]}],"members":{"headerTableElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["headerTable"]}]}],"contentElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["content"]}]}],"scrollContainerElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollContainer"]}]}],"tempRowElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["tempRow"]}]}],"scrollBodyElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollBody"]}]}],"scrollAboveDataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollAboveData"]}]}],"scrollDataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollData"]}]}],"lastFocusableShadowElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["lastFocusableShadowElement"]}]}],"groupHeaderTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":["group"]}]}],"selectionChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowDblclick":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onGroupToggleClicked":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"columns":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChildren"},"arguments":[{"__symbolic":"reference","module":"./data-table-column.component","name":"DataTableColumnComponent"}]}]}],"renderedItemsChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"isBusy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"loadingMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"noRecordMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lazyLoadingData":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onNodeExpand":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onNodeSelect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"lazyLoad":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"globalFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"caseSensitiveFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showAsTree":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"items":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selection":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectionMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultSortColumn":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultSortMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"onFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"doCustomSort":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowSelect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowUnselect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"groupColumn":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"groupSortMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"useGroupToggle":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showHeader":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"tableAriaLabelledBy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showGrid":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showAllItemCheckbox":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectAndCheck":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"linkParentChildrenSelections":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectItemWhenNavigatingWithKeyboard":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showLeftMargin":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"scrollable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultGroupToggleExpanded":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional"}},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject"},"arguments":["layout"]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"},{"__symbolic":"reference","module":"@angular/core","name":"NgZone"},{"__symbolic":"reference","module":"../common/interfaces","name":"Layout"}]}],"refreshData":[{"__symbolic":"method"}],"resetScroll":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"onContentTablePressed":[{"__symbolic":"method"}],"onContentItemFocused":[{"__symbolic":"method"}],"onContentItemBlurred":[{"__symbolic":"method"}],"onLastFocusableShadowElementFocused":[{"__symbolic":"method"}],"generateNGClassForRenderedItem":[{"__symbolic":"method"}],"shouldAllItemCheckBoxChecked":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"ngAfterViewChecked":[{"__symbolic":"method"}],"selectItem":[{"__symbolic":"method"}],"getPlaceholderMessage":[{"__symbolic":"method"}],"clickGroupToggle":[{"__symbolic":"method"}],"clickTreeToggle":[{"__symbolic":"method"}],"expandAllGroup":[{"__symbolic":"method"}],"collaseAllGroup":[{"__symbolic":"method"}],"isFirstDataColumn":[{"__symbolic":"method"}],"clickColumn":[{"__symbolic":"method"}],"doubleClickRow":[{"__symbolic":"method"}],"scrollSelectedItemIntoView":[{"__symbolic":"method"}],"onItemCheckBoxClicked":[{"__symbolic":"method"}],"onAllItemCheckBoxClicked":[{"__symbolic":"method"}],"isItemSelected":[{"__symbolic":"method"}],"isGroupExpanded":[{"__symbolic":"method"}],"virtualCount":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"resolveObjectPath":[{"__symbolic":"method"}],"getActiveRenderedItemIndex":[{"__symbolic":"method"}],"moveToHeadOfRenderedItems":[{"__symbolic":"method"}],"moveToPreviousPageOfRenderedItems":[{"__symbolic":"method"}],"moveToPreviousRenderedItem":[{"__symbolic":"method"}],"moveToNextRenderedItem":[{"__symbolic":"method"}],"moveToNextPageOfRenderedItems":[{"__symbolic":"method"}],"moveToEndOfRenderedItems":[{"__symbolic":"method"}],"activateRenderedItemByCondition":[{"__symbolic":"method"}],"activateRenderedItemByIndex":[{"__symbolic":"method"}],"getAriaExpandedAttributeValue":[{"__symbolic":"method"}],"getAriaSortAttributeValue":[{"__symbolic":"method"}],"initializeUI":[{"__symbolic":"method"}],"sortItems":[{"__symbolic":"method"}],"defaultSortCompareFunction":[{"__symbolic":"method"}],"hasVerticalOverflow":[{"__symbolic":"method"}],"alignScrollBar":[{"__symbolic":"method"}],"calculateScrollbarWidth":[{"__symbolic":"method"}],"calculateItemInViewPort":[{"__symbolic":"method"}],"filter":[{"__symbolic":"method"}],"handleTreeNode":[{"__symbolic":"method"}],"handleComplexContent":[{"__symbolic":"method"}],"renderItems":[{"__symbolic":"method"}],"handleScrollAboveDataElement":[{"__symbolic":"method"}],"onLayoutChanged":[{"__symbolic":"method"}],"handleTreeNodeSelection":[{"__symbolic":"method"}],"alignContent":[{"__symbolic":"method"}],"clearSelection":[{"__symbolic":"method"}],"tryToFocusSelectedRow":[{"__symbolic":"method"}],"onElementFocusing":[{"__symbolic":"method"}],"updateActiveRenderedItemIndexBySelection":[{"__symbolic":"method"}]},"statics":{"selectionModeMultipleOption":"multiple"}},"TreeTableComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"DataTableComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-tree-table","styles":["\n      :host {\n          width: 100%;\n          display: flex;\n          flex-wrap: nowrap;\n          flex-direction: column;\n          align-content: stretch;\n          align-items: stretch;\n          justify-content: flex-start;\n          overflow: hidden;\n      }\n\n\n      /* Dont override absolute positioning. This will become unecesary after removing css file. */\n\n      :host:not(.sme-layout-absolute) {\n          position: relative;\n      }\n\n      th {\n          height: 27px;\n      }\n\n      .header.selectable th {\n          cursor: pointer;\n      }\n\n      .header.selectable th:hover,\n      .header.selectable.has-multiple-selection table thead tr th.first .datatable-checkbox:hover {\n          background: #f8f8f8;\n      }\n\n      th .sme-icon:before {\n          font-size: 11px;\n      }\n\n      .header table thead tr th.first:hover {\n          background: none;\n          cursor: default;\n      }\n\n      .header table thead tr th.first .datatable-checkbox {\n          display: none;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first .datatable-checkbox {\n          display: block;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first,\n      .content .item.no-data .prefix {\n          width: 26px;\n      }\n\n      .header.has-multiple-selection table thead tr th.first,\n      .content.has-multiple-selection .item td.first,\n      .content.has-multiple-selection .item.no-data .prefix {\n          width: 26px;\n          padding-left: 0;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item td.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item.no-data .prefix {\n          width: 47px;    \n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first {\n          padding-left: 29px;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first {\n          display: none;\n      }\n\n      .header.selectable.show-left-margin table thead tr th.first,\n      .content.selectable.show-left-margin .item td.first {\n          display: table-cell;\n      }\n\n\n      /* .header table thead tr th.first,\n      .item td.first .sme-table-cell {\n          padding: 0;\n      } */\n\n      .item td.first .datatable-checkbox, .item td.first .datatable-checkbox input {\n          display: none;\n      }\n\n      .tree .item td.first-data-column .datatable-checkbox {\n          visibility: hidden;\n      }\n\n      .tree .item.checked td.first-data-column .datatable-checkbox,\n      .tree .item td.first-data-column:hover .datatable-checkbox {\n          visibility: visible;\n      }\n\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox,\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox input,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox input {\n          display: block;\n      }\n\n      .item.no-data .prefix {\n          float: left;\n      }\n\n      .item.no-data .sme-table-cell {\n          padding: 0 8px;\n      }\n\n      .item.group-header .sme-table-cell:first-of-type .sme-icon:before {\n          font-size: 10px;\n          line-height: 10px;\n          margin-top: -3px;\n          margin-right: 3px;\n      }\n\n      .item.group-item .first-data-column .sme-table-cell {\n          padding-left: 26px;\n      }\n\n      .header table.sme-table-virtualized th:first-of-type {\n          padding-left: 8px;\n          padding-right: 8px;\n      }\n\n      .header.has-multiple-selection table.sme-table-virtualized th:first-of-type,\n      .content.has-multiple-selection table.sme-table-virtualized td:first-of-type .sme-table-cell {\n          padding-left: 29px;\n          padding-right: 0px;\n      }\n\n      /* .header table thead tr th {\n          padding: 0 8px;\n      } */\n\n      .header {\n          flex: 0 0 auto;\n          /* border-bottom: solid 1px #ddd; */\n          /* background: white; */\n          position: absolute;\n          margin-top: -1px;\n          z-index: 1;\n      }\n\n      .header.is-scrolled {\n          box-shadow: 0px -1px 7px #999;\n      }\n\n      div.content {\n          flex: 1 1 auto;\n          position: relative;\n          margin-top: 27px;\n          margin-left: 0;\n      }\n\n      .content.no-header {\n          margin-top: 0;\n      }\n\n      .content .scroll-container.sme-layout-absolute.sme-position-inset-none .scroll-data {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          overflow: hidden;\n          border-collapse: collapse;\n      }\n\n      .content .scroll-container {\n          overflow-x: hidden;\n          overflow-y: hidden;\n      }\n\n      .content .scroll-container.should-scroll{\n          overflow-y: auto;\n      }\n\n      .content .scroll-body {\n          position: relative;\n          overflow: hidden;\n          width: 100%;\n      }\n\n      .sme-table-cell {\n          height: 30px;\n          line-height: 30px;\n          font-size: 12px;\n          overflow: hidden;\n      }\n\n      table.sme-table-virtualized td .sme-table-cell,\n      table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: none;\n      }\n\n      .show-grid table.sme-table-virtualized td .sme-table-cell,\n      .show-grid table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: solid 1px #eee;\n      } \n\n      .content.selectable .item.data {\n          cursor: pointer;\n      }\n\n      .content.selectable .item.data:hover {\n          background: #f2fbfe;\n      }\n\n      .item.data.selected, .content.selectable .item.data.selected:hover {\n          background: #E6F7FE;\n      }\n\n      .item .sme-table-cell {\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          /* padding: 0 8px; */\n      }\n\n      :host>>>.scrollbar-measure {\n          width: 100px;\n          height: 100px;\n          overflow: scroll;\n          position: absolute;\n          top: -9999px;\n      }\n\n      .datatable-checkbox {\n          width: 100%;\n          position: relative;\n          height: 30px;\n      }\n\n      .tree .datatable-checkbox-container{\n          width: 24px;\n          display:block;\n          float: left;    \n          padding-left:4px;\n          padding-right:4px;\n      }\n\n      .tree .datatable-checkbox input {\n          visibility: hidden;    \n      }\n\n      .tree .datatable-checkbox:hover input{\n          visibility: visible;\n      }\n\n      .datatable-checkbox label {\n          width: 12px;\n          height: 12px;\n          cursor: pointer;\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background: white;\n          border: solid 1px #686868;\n      }\n\n      .datatable-checkbox input[type=checkbox]:hover+label {\n          background: rgb(242, 251, 254);\n      }\n\n      .datatable-checkbox input[type=checkbox] {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          margin: 0;\n          opacity: 0;\n          cursor: pointer;\n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label {\n          background: none;\n          border: solid 1px transparent;\n      }\n\n      .datatable-checkbox input[type=checkbox]:focus+label {\n          outline: rgba(0, 0, 0, .8) dashed 1px;    \n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label:after {\n          content: '\\E8FB';\n          font-family: Server-MDL2;\n          position: absolute;\n          top: 0;\n          line-height: 12px;\n      }\n\n      .loading-indicator {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell {\n          float: left;\n          height: 30px;    \n      }\n\n      .tree .scroll-data .first-data-column .sme-table-cell {\n          padding-left: 0;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .sme-icon:before {\n          margin-top: -4px;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .placeholder {\n          display: inline-block;\n          width: 16px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          visibility: hidden;    \n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          margin-left: 2px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          visibility: visible;\n          float:left;\n          width: 24px;\n          text-align: center;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          width: 10px;\n          margin-left: 5px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .placeholder {\n          display: block;\n          width: 24px;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .placeholder{\n          width: 10px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .placeholder {\n          display: none;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon:before {\n          display: inline-block;\n          font-size: 10px;\n          line-height: 30px;\n          margin-right: 3px;\n          margin-top: 0;\n      }\n    "],"template":"\n      <div *ngIf=\"showHeader\" class=\"header sme-focus-zone\" #header [ngClass]=\"{'is-scrolled':isScrolledDown, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'show-left-margin':showLeftMargin, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <table #headerTable class=\"sme-table-virtualized\" [attr.aria-labelledby]=\"tableAriaLabelledBy\" [attr.aria-rowcount]=\"renderedItems.length\"\n              [attr.aria-colcount]=\"columns.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n              <thead>\n                  <tr tabindex=\"0\">\n                      <th class=\"first\">\n                          <div class=\"datatable-checkbox\" *ngIf=\"selectionMode==='multiple'\">\n                              <input type=\"checkbox\" [checked]=\"shouldAllItemCheckBoxChecked()\" (change)=\"onAllItemCheckBoxClicked()\" />\n                              <label></label>\n                          </div>\n                      </th>\n                      <th tabindex=\"0\" *ngFor=\"let column of columns\" (click)=\"clickColumn(column)\" [hidden]=\"column===groupColumn\" [ngStyle]=\"{'width':column.width}\"\n                          class=\"{{column.styleClass}}\" [attr.aria-sort]=\"getAriaSortAttributeValue(column)\">\n                          <span class=\"columnName\">{{column.header}}</span>\n                          <span class=\"sortIcon sme-icon\" [ngClass]=\"{'sme-icon-up':column.sortMode===sortModeEnum.Ascend,'sme-icon-down':column.sortMode===sortModeEnum.Descend}\"></span>\n                      </th>\n                  </tr>\n              </thead>\n          </table>\n      </div>\n      <div class=\"content sme-focus-zone\" #content [ngClass]=\"{'is-busy':isBusy, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'no-header':!showHeader, 'show-left-margin':showLeftMargin, 'tree':showAsTree, 'show-grid':showGrid, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <div class=\"loading-indicator\" *ngIf=\"isBusy\">\n              <sme-loading-wheel></sme-loading-wheel>\n          </div>\n          <div class=\"scroll-container\" [ngClass]=\"{'sme-layout-absolute sme-position-inset-none': scrollable, 'should-scroll': shouldScroll}\"\n              #scrollContainer>\n              <div class=\"item no-data\" *ngIf=\"renderedItems.length===0 && !lazyLoad\">\n                  <div class=\"prefix sme-table-cell\">&nbsp;</div>\n                  <div class=\"sme-table-cell\">{{getPlaceholderMessage()}}</div>\n              </div>\n              <div class=\"scroll-body\" #scrollBody>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollAboveData>\n                      <tbody>\n                          <tr *ngFor=\"let renderedItem of renderedItemsAboveViewPort; let rowIndex = index\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || column===groupColumn\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">\n                                      {{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollData [attr.aria-rowcount]=\"renderedItems.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n                      <tbody>\n                          <tr (keydown)=\"onContentTablePressed($event)\" *ngFor=\"let renderedItem of renderedItemsInAndBelowViewPort; let rowIndex = index\"\n                              (click)=\"selectItem($event, renderedItem)\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\"\n                              [attr.tabindex]=\"renderedItem.index >=0 ? 0 : undefined\" (dblclick)=\"doubleClickRow($event,renderedItem)\"\n                              (focus)=\"onContentItemFocused($event)\" (focusin)=\"onContentItemFocused($event)\" (focusout)=\"onContentItemBlurred($event)\"\n                              [attr.data-rendered-item-index]=\"renderedItem.index\" [attr.aria-rowindex]=\"renderedItem.index\" [attr.aria-selected]=\"isItemSelected(renderedItem) ?'true': undefined\"\n                              role=\"row\" [attr.aria-expanded]=\"getAriaExpandedAttributeValue(renderedItem)\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || (renderedItem.type!=renderedItemTypeEnum.GroupHeader && column===groupColumn)\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">{{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}</div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                          <tr class=\"item\" #tempRow>\n                              <td>\n                                  <div class=\"sme-table-cell\">&nbsp;</div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </div>\n              <div #lastFocusableShadowElement class=\"sme-focus-zone last-focusable-shadow-element\" (focus)=\"onLastFocusableShadowElementFocused($event)\" tabindex=\"0\"></div>\n          </div>\n      </div>\n    "}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional"}},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject"},"arguments":["layout"]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"},{"__symbolic":"reference","module":"@angular/core","name":"NgZone"},{"__symbolic":"reference","module":"../common/interfaces","name":"Layout"}]}]}}}},{"__symbolic":"module","version":1,"metadata":{"DataTableComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-data-table","styles":["\n      :host {\n          width: 100%;\n          display: flex;\n          flex-wrap: nowrap;\n          flex-direction: column;\n          align-content: stretch;\n          align-items: stretch;\n          justify-content: flex-start;\n          overflow: hidden;\n      }\n\n\n      /* Dont override absolute positioning. This will become unecesary after removing css file. */\n\n      :host:not(.sme-layout-absolute) {\n          position: relative;\n      }\n\n      th {\n          height: 27px;\n      }\n\n      .header.selectable th {\n          cursor: pointer;\n      }\n\n      .header.selectable th:hover,\n      .header.selectable.has-multiple-selection table thead tr th.first .datatable-checkbox:hover {\n          background: #f8f8f8;\n      }\n\n      th .sme-icon:before {\n          font-size: 11px;\n      }\n\n      .header table thead tr th.first:hover {\n          background: none;\n          cursor: default;\n      }\n\n      .header table thead tr th.first .datatable-checkbox {\n          display: none;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first .datatable-checkbox {\n          display: block;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first,\n      .content .item.no-data .prefix {\n          width: 26px;\n      }\n\n      .header.has-multiple-selection table thead tr th.first,\n      .content.has-multiple-selection .item td.first,\n      .content.has-multiple-selection .item.no-data .prefix {\n          width: 26px;\n          padding-left: 0;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item td.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item.no-data .prefix {\n          width: 47px;    \n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first {\n          padding-left: 29px;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first {\n          display: none;\n      }\n\n      .header.selectable.show-left-margin table thead tr th.first,\n      .content.selectable.show-left-margin .item td.first {\n          display: table-cell;\n      }\n\n\n      /* .header table thead tr th.first,\n      .item td.first .sme-table-cell {\n          padding: 0;\n      } */\n\n      .item td.first .datatable-checkbox, .item td.first .datatable-checkbox input {\n          display: none;\n      }\n\n      .tree .item td.first-data-column .datatable-checkbox {\n          visibility: hidden;\n      }\n\n      .tree .item.checked td.first-data-column .datatable-checkbox,\n      .tree .item td.first-data-column:hover .datatable-checkbox {\n          visibility: visible;\n      }\n\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox,\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox input,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox input {\n          display: block;\n      }\n\n      .item.no-data .prefix {\n          float: left;\n      }\n\n      .item.no-data .sme-table-cell {\n          padding: 0 8px;\n      }\n\n      .item.group-header .sme-table-cell:first-of-type .sme-icon:before {\n          font-size: 10px;\n          line-height: 10px;\n          margin-top: -3px;\n          margin-right: 3px;\n      }\n\n      .item.group-item .first-data-column .sme-table-cell {\n          padding-left: 26px;\n      }\n\n      .header table.sme-table-virtualized th:first-of-type {\n          padding-left: 8px;\n          padding-right: 8px;\n      }\n\n      .header.has-multiple-selection table.sme-table-virtualized th:first-of-type,\n      .content.has-multiple-selection table.sme-table-virtualized td:first-of-type .sme-table-cell {\n          padding-left: 29px;\n          padding-right: 0px;\n      }\n\n      /* .header table thead tr th {\n          padding: 0 8px;\n      } */\n\n      .header {\n          flex: 0 0 auto;\n          /* border-bottom: solid 1px #ddd; */\n          /* background: white; */\n          position: absolute;\n          margin-top: -1px;\n          z-index: 1;\n      }\n\n      .header.is-scrolled {\n          box-shadow: 0px -1px 7px #999;\n      }\n\n      div.content {\n          flex: 1 1 auto;\n          position: relative;\n          margin-top: 27px;\n          margin-left: 0;\n      }\n\n      .content.no-header {\n          margin-top: 0;\n      }\n\n      .content .scroll-container.sme-layout-absolute.sme-position-inset-none .scroll-data {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          overflow: hidden;\n          border-collapse: collapse;\n      }\n\n      .content .scroll-container {\n          overflow-x: hidden;\n          overflow-y: hidden;\n      }\n\n      .content .scroll-container.should-scroll{\n          overflow-y: auto;\n      }\n\n      .content .scroll-body {\n          position: relative;\n          overflow: hidden;\n          width: 100%;\n      }\n\n      .sme-table-cell {\n          height: 30px;\n          line-height: 30px;\n          font-size: 12px;\n          overflow: hidden;\n      }\n\n      table.sme-table-virtualized td .sme-table-cell,\n      table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: none;\n      }\n\n      .show-grid table.sme-table-virtualized td .sme-table-cell,\n      .show-grid table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: solid 1px #eee;\n      } \n\n      .content.selectable .item.data {\n          cursor: pointer;\n      }\n\n      .content.selectable .item.data:hover {\n          background: #f2fbfe;\n      }\n\n      .item.data.selected, .content.selectable .item.data.selected:hover {\n          background: #E6F7FE;\n      }\n\n      .item .sme-table-cell {\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          /* padding: 0 8px; */\n      }\n\n      :host>>>.scrollbar-measure {\n          width: 100px;\n          height: 100px;\n          overflow: scroll;\n          position: absolute;\n          top: -9999px;\n      }\n\n      .datatable-checkbox {\n          width: 100%;\n          position: relative;\n          height: 30px;\n      }\n\n      .tree .datatable-checkbox-container{\n          width: 24px;\n          display:block;\n          float: left;    \n          padding-left:4px;\n          padding-right:4px;\n      }\n\n      .tree .datatable-checkbox input {\n          visibility: hidden;    \n      }\n\n      .tree .datatable-checkbox:hover input{\n          visibility: visible;\n      }\n\n      .datatable-checkbox label {\n          width: 12px;\n          height: 12px;\n          cursor: pointer;\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background: white;\n          border: solid 1px #686868;\n      }\n\n      .datatable-checkbox input[type=checkbox]:hover+label {\n          background: rgb(242, 251, 254);\n      }\n\n      .datatable-checkbox input[type=checkbox] {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          margin: 0;\n          opacity: 0;\n          cursor: pointer;\n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label {\n          background: none;\n          border: solid 1px transparent;\n      }\n\n      .datatable-checkbox input[type=checkbox]:focus+label {\n          outline: rgba(0, 0, 0, .8) dashed 1px;    \n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label:after {\n          content: '\\E8FB';\n          font-family: Server-MDL2;\n          position: absolute;\n          top: 0;\n          line-height: 12px;\n      }\n\n      .loading-indicator {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell {\n          float: left;\n          height: 30px;    \n      }\n\n      .tree .scroll-data .first-data-column .sme-table-cell {\n          padding-left: 0;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .sme-icon:before {\n          margin-top: -4px;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .placeholder {\n          display: inline-block;\n          width: 16px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          visibility: hidden;    \n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          margin-left: 2px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          visibility: visible;\n          float:left;\n          width: 24px;\n          text-align: center;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          width: 10px;\n          margin-left: 5px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .placeholder {\n          display: block;\n          width: 24px;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .placeholder{\n          width: 10px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .placeholder {\n          display: none;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon:before {\n          display: inline-block;\n          font-size: 10px;\n          line-height: 30px;\n          margin-right: 3px;\n          margin-top: 0;\n      }\n    "],"template":"\n      <div *ngIf=\"showHeader\" class=\"header sme-focus-zone\" #header [ngClass]=\"{'is-scrolled':isScrolledDown, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'show-left-margin':showLeftMargin, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <table #headerTable class=\"sme-table-virtualized\" [attr.aria-labelledby]=\"tableAriaLabelledBy\" [attr.aria-rowcount]=\"renderedItems.length\"\n              [attr.aria-colcount]=\"columns.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n              <thead>\n                  <tr tabindex=\"0\">\n                      <th class=\"first\">\n                          <div class=\"datatable-checkbox\" *ngIf=\"selectionMode==='multiple'\">\n                              <input type=\"checkbox\" [checked]=\"shouldAllItemCheckBoxChecked()\" (change)=\"onAllItemCheckBoxClicked()\" />\n                              <label></label>\n                          </div>\n                      </th>\n                      <th tabindex=\"0\" *ngFor=\"let column of columns\" (click)=\"clickColumn(column)\" [hidden]=\"column===groupColumn\" [ngStyle]=\"{'width':column.width}\"\n                          class=\"{{column.styleClass}}\" [attr.aria-sort]=\"getAriaSortAttributeValue(column)\">\n                          <span class=\"columnName\">{{column.header}}</span>\n                          <span class=\"sortIcon sme-icon\" [ngClass]=\"{'sme-icon-up':column.sortMode===sortModeEnum.Ascend,'sme-icon-down':column.sortMode===sortModeEnum.Descend}\"></span>\n                      </th>\n                  </tr>\n              </thead>\n          </table>\n      </div>\n      <div class=\"content sme-focus-zone\" #content [ngClass]=\"{'is-busy':isBusy, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'no-header':!showHeader, 'show-left-margin':showLeftMargin, 'tree':showAsTree, 'show-grid':showGrid, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <div class=\"loading-indicator\" *ngIf=\"isBusy\">\n              <sme-loading-wheel></sme-loading-wheel>\n          </div>\n          <div class=\"scroll-container\" [ngClass]=\"{'sme-layout-absolute sme-position-inset-none': scrollable, 'should-scroll': shouldScroll}\"\n              #scrollContainer>\n              <div class=\"item no-data\" *ngIf=\"renderedItems.length===0 && !lazyLoad\">\n                  <div class=\"prefix sme-table-cell\">&nbsp;</div>\n                  <div class=\"sme-table-cell\">{{getPlaceholderMessage()}}</div>\n              </div>\n              <div class=\"scroll-body\" #scrollBody>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollAboveData>\n                      <tbody>\n                          <tr *ngFor=\"let renderedItem of renderedItemsAboveViewPort; let rowIndex = index\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || column===groupColumn\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">\n                                      {{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollData [attr.aria-rowcount]=\"renderedItems.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n                      <tbody>\n                          <tr (keydown)=\"onContentTablePressed($event)\" *ngFor=\"let renderedItem of renderedItemsInAndBelowViewPort; let rowIndex = index\"\n                              (click)=\"selectItem($event, renderedItem)\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\"\n                              [attr.tabindex]=\"renderedItem.index >=0 ? 0 : undefined\" (dblclick)=\"doubleClickRow($event,renderedItem)\"\n                              (focus)=\"onContentItemFocused($event)\" (focusin)=\"onContentItemFocused($event)\" (focusout)=\"onContentItemBlurred($event)\"\n                              [attr.data-rendered-item-index]=\"renderedItem.index\" [attr.aria-rowindex]=\"renderedItem.index\" [attr.aria-selected]=\"isItemSelected(renderedItem) ?'true': undefined\"\n                              role=\"row\" [attr.aria-expanded]=\"getAriaExpandedAttributeValue(renderedItem)\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || (renderedItem.type!=renderedItemTypeEnum.GroupHeader && column===groupColumn)\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">{{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}</div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                          <tr class=\"item\" #tempRow>\n                              <td>\n                                  <div class=\"sme-table-cell\">&nbsp;</div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </div>\n              <div #lastFocusableShadowElement class=\"sme-focus-zone last-focusable-shadow-element\" (focus)=\"onLastFocusableShadowElementFocused($event)\" tabindex=\"0\"></div>\n          </div>\n      </div>\n    "}]}],"members":{"headerTableElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["headerTable"]}]}],"contentElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["content"]}]}],"scrollContainerElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollContainer"]}]}],"tempRowElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["tempRow"]}]}],"scrollBodyElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollBody"]}]}],"scrollAboveDataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollAboveData"]}]}],"scrollDataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["scrollData"]}]}],"lastFocusableShadowElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["lastFocusableShadowElement"]}]}],"groupHeaderTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":["group"]}]}],"selectionChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowDblclick":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onGroupToggleClicked":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"columns":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChildren"},"arguments":[{"__symbolic":"reference","module":"./data-table-column.component","name":"DataTableColumnComponent"}]}]}],"renderedItemsChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"isBusy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"loadingMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"noRecordMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lazyLoadingData":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onNodeExpand":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onNodeSelect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"lazyLoad":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"globalFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"caseSensitiveFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showAsTree":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"items":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selection":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectionMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultSortColumn":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultSortMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"onFilter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"doCustomSort":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowSelect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"onRowUnselect":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"groupColumn":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"groupSortMode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"useGroupToggle":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showHeader":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"tableAriaLabelledBy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showGrid":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showAllItemCheckbox":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectAndCheck":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"linkParentChildrenSelections":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectItemWhenNavigatingWithKeyboard":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"showLeftMargin":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"scrollable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"defaultGroupToggleExpanded":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional"}},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject"},"arguments":["layout"]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"},{"__symbolic":"reference","module":"@angular/core","name":"NgZone"},{"__symbolic":"reference","module":"../common/interfaces","name":"Layout"}]}],"refreshData":[{"__symbolic":"method"}],"resetScroll":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"onContentTablePressed":[{"__symbolic":"method"}],"onContentItemFocused":[{"__symbolic":"method"}],"onContentItemBlurred":[{"__symbolic":"method"}],"onLastFocusableShadowElementFocused":[{"__symbolic":"method"}],"generateNGClassForRenderedItem":[{"__symbolic":"method"}],"shouldAllItemCheckBoxChecked":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"ngAfterViewChecked":[{"__symbolic":"method"}],"selectItem":[{"__symbolic":"method"}],"getPlaceholderMessage":[{"__symbolic":"method"}],"clickGroupToggle":[{"__symbolic":"method"}],"clickTreeToggle":[{"__symbolic":"method"}],"expandAllGroup":[{"__symbolic":"method"}],"collaseAllGroup":[{"__symbolic":"method"}],"isFirstDataColumn":[{"__symbolic":"method"}],"clickColumn":[{"__symbolic":"method"}],"doubleClickRow":[{"__symbolic":"method"}],"scrollSelectedItemIntoView":[{"__symbolic":"method"}],"onItemCheckBoxClicked":[{"__symbolic":"method"}],"onAllItemCheckBoxClicked":[{"__symbolic":"method"}],"isItemSelected":[{"__symbolic":"method"}],"isGroupExpanded":[{"__symbolic":"method"}],"virtualCount":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"resolveObjectPath":[{"__symbolic":"method"}],"getActiveRenderedItemIndex":[{"__symbolic":"method"}],"moveToHeadOfRenderedItems":[{"__symbolic":"method"}],"moveToPreviousPageOfRenderedItems":[{"__symbolic":"method"}],"moveToPreviousRenderedItem":[{"__symbolic":"method"}],"moveToNextRenderedItem":[{"__symbolic":"method"}],"moveToNextPageOfRenderedItems":[{"__symbolic":"method"}],"moveToEndOfRenderedItems":[{"__symbolic":"method"}],"activateRenderedItemByCondition":[{"__symbolic":"method"}],"activateRenderedItemByIndex":[{"__symbolic":"method"}],"getAriaExpandedAttributeValue":[{"__symbolic":"method"}],"getAriaSortAttributeValue":[{"__symbolic":"method"}],"initializeUI":[{"__symbolic":"method"}],"sortItems":[{"__symbolic":"method"}],"defaultSortCompareFunction":[{"__symbolic":"method"}],"hasVerticalOverflow":[{"__symbolic":"method"}],"alignScrollBar":[{"__symbolic":"method"}],"calculateScrollbarWidth":[{"__symbolic":"method"}],"calculateItemInViewPort":[{"__symbolic":"method"}],"filter":[{"__symbolic":"method"}],"handleTreeNode":[{"__symbolic":"method"}],"handleComplexContent":[{"__symbolic":"method"}],"renderItems":[{"__symbolic":"method"}],"handleScrollAboveDataElement":[{"__symbolic":"method"}],"onLayoutChanged":[{"__symbolic":"method"}],"handleTreeNodeSelection":[{"__symbolic":"method"}],"alignContent":[{"__symbolic":"method"}],"clearSelection":[{"__symbolic":"method"}],"tryToFocusSelectedRow":[{"__symbolic":"method"}],"onElementFocusing":[{"__symbolic":"method"}],"updateActiveRenderedItemIndexBySelection":[{"__symbolic":"method"}]},"statics":{"selectionModeMultipleOption":"multiple"}},"TreeTableComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"DataTableComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-tree-table","styles":["\n      :host {\n          width: 100%;\n          display: flex;\n          flex-wrap: nowrap;\n          flex-direction: column;\n          align-content: stretch;\n          align-items: stretch;\n          justify-content: flex-start;\n          overflow: hidden;\n      }\n\n\n      /* Dont override absolute positioning. This will become unecesary after removing css file. */\n\n      :host:not(.sme-layout-absolute) {\n          position: relative;\n      }\n\n      th {\n          height: 27px;\n      }\n\n      .header.selectable th {\n          cursor: pointer;\n      }\n\n      .header.selectable th:hover,\n      .header.selectable.has-multiple-selection table thead tr th.first .datatable-checkbox:hover {\n          background: #f8f8f8;\n      }\n\n      th .sme-icon:before {\n          font-size: 11px;\n      }\n\n      .header table thead tr th.first:hover {\n          background: none;\n          cursor: default;\n      }\n\n      .header table thead tr th.first .datatable-checkbox {\n          display: none;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first .datatable-checkbox {\n          display: block;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first,\n      .content .item.no-data .prefix {\n          width: 26px;\n      }\n\n      .header.has-multiple-selection table thead tr th.first,\n      .content.has-multiple-selection .item td.first,\n      .content.has-multiple-selection .item.no-data .prefix {\n          width: 26px;\n          padding-left: 0;\n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item td.first,\n      .content.has-multiple-selection.show-all-item-checkbox .item.no-data .prefix {\n          width: 47px;    \n      }\n\n      .header.has-multiple-selection.show-all-item-checkbox table thead tr th.first {\n          padding-left: 29px;\n      }\n\n      .header table thead tr th.first,\n      .content .item td.first {\n          display: none;\n      }\n\n      .header.selectable.show-left-margin table thead tr th.first,\n      .content.selectable.show-left-margin .item td.first {\n          display: table-cell;\n      }\n\n\n      /* .header table thead tr th.first,\n      .item td.first .sme-table-cell {\n          padding: 0;\n      } */\n\n      .item td.first .datatable-checkbox, .item td.first .datatable-checkbox input {\n          display: none;\n      }\n\n      .tree .item td.first-data-column .datatable-checkbox {\n          visibility: hidden;\n      }\n\n      .tree .item.checked td.first-data-column .datatable-checkbox,\n      .tree .item td.first-data-column:hover .datatable-checkbox {\n          visibility: visible;\n      }\n\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox,\n      .content.has-multiple-selection .item.checked td.first .datatable-checkbox input,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox,\n      .content.has-multiple-selection .item td.first:hover .datatable-checkbox input {\n          display: block;\n      }\n\n      .item.no-data .prefix {\n          float: left;\n      }\n\n      .item.no-data .sme-table-cell {\n          padding: 0 8px;\n      }\n\n      .item.group-header .sme-table-cell:first-of-type .sme-icon:before {\n          font-size: 10px;\n          line-height: 10px;\n          margin-top: -3px;\n          margin-right: 3px;\n      }\n\n      .item.group-item .first-data-column .sme-table-cell {\n          padding-left: 26px;\n      }\n\n      .header table.sme-table-virtualized th:first-of-type {\n          padding-left: 8px;\n          padding-right: 8px;\n      }\n\n      .header.has-multiple-selection table.sme-table-virtualized th:first-of-type,\n      .content.has-multiple-selection table.sme-table-virtualized td:first-of-type .sme-table-cell {\n          padding-left: 29px;\n          padding-right: 0px;\n      }\n\n      /* .header table thead tr th {\n          padding: 0 8px;\n      } */\n\n      .header {\n          flex: 0 0 auto;\n          /* border-bottom: solid 1px #ddd; */\n          /* background: white; */\n          position: absolute;\n          margin-top: -1px;\n          z-index: 1;\n      }\n\n      .header.is-scrolled {\n          box-shadow: 0px -1px 7px #999;\n      }\n\n      div.content {\n          flex: 1 1 auto;\n          position: relative;\n          margin-top: 27px;\n          margin-left: 0;\n      }\n\n      .content.no-header {\n          margin-top: 0;\n      }\n\n      .content .scroll-container.sme-layout-absolute.sme-position-inset-none .scroll-data {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          overflow: hidden;\n          border-collapse: collapse;\n      }\n\n      .content .scroll-container {\n          overflow-x: hidden;\n          overflow-y: hidden;\n      }\n\n      .content .scroll-container.should-scroll{\n          overflow-y: auto;\n      }\n\n      .content .scroll-body {\n          position: relative;\n          overflow: hidden;\n          width: 100%;\n      }\n\n      .sme-table-cell {\n          height: 30px;\n          line-height: 30px;\n          font-size: 12px;\n          overflow: hidden;\n      }\n\n      table.sme-table-virtualized td .sme-table-cell,\n      table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: none;\n      }\n\n      .show-grid table.sme-table-virtualized td .sme-table-cell,\n      .show-grid table.sme-table-virtualized td .sme-table-expander-cell {\n          border-bottom: solid 1px #eee;\n      } \n\n      .content.selectable .item.data {\n          cursor: pointer;\n      }\n\n      .content.selectable .item.data:hover {\n          background: #f2fbfe;\n      }\n\n      .item.data.selected, .content.selectable .item.data.selected:hover {\n          background: #E6F7FE;\n      }\n\n      .item .sme-table-cell {\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          /* padding: 0 8px; */\n      }\n\n      :host>>>.scrollbar-measure {\n          width: 100px;\n          height: 100px;\n          overflow: scroll;\n          position: absolute;\n          top: -9999px;\n      }\n\n      .datatable-checkbox {\n          width: 100%;\n          position: relative;\n          height: 30px;\n      }\n\n      .tree .datatable-checkbox-container{\n          width: 24px;\n          display:block;\n          float: left;    \n          padding-left:4px;\n          padding-right:4px;\n      }\n\n      .tree .datatable-checkbox input {\n          visibility: hidden;    \n      }\n\n      .tree .datatable-checkbox:hover input{\n          visibility: visible;\n      }\n\n      .datatable-checkbox label {\n          width: 12px;\n          height: 12px;\n          cursor: pointer;\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background: white;\n          border: solid 1px #686868;\n      }\n\n      .datatable-checkbox input[type=checkbox]:hover+label {\n          background: rgb(242, 251, 254);\n      }\n\n      .datatable-checkbox input[type=checkbox] {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          margin: 0;\n          opacity: 0;\n          cursor: pointer;\n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label {\n          background: none;\n          border: solid 1px transparent;\n      }\n\n      .datatable-checkbox input[type=checkbox]:focus+label {\n          outline: rgba(0, 0, 0, .8) dashed 1px;    \n      }\n\n      .datatable-checkbox input[type=checkbox]:checked+label:after {\n          content: '\\E8FB';\n          font-family: Server-MDL2;\n          position: absolute;\n          top: 0;\n          line-height: 12px;\n      }\n\n      .loading-indicator {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell {\n          float: left;\n          height: 30px;    \n      }\n\n      .tree .scroll-data .first-data-column .sme-table-cell {\n          padding-left: 0;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .sme-icon:before {\n          margin-top: -4px;\n      }\n\n      :host>>>.tree .scroll-data .sme-table-cell .placeholder {\n          display: inline-block;\n          width: 16px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          visibility: hidden;    \n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .sme-icon {\n          margin-left: 2px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          visibility: visible;\n          float:left;\n          width: 24px;\n          text-align: center;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell.has-children .sme-icon {\n          width: 10px;\n          margin-left: 5px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .placeholder {\n          display: block;\n          width: 24px;\n      }\n\n      .tree.has-multiple-selection .scroll-data .first-data-column .sme-table-expander-cell .placeholder{\n          width: 10px;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell.has-children .placeholder {\n          display: none;\n      }\n\n      .tree .scroll-data .first-data-column .sme-table-expander-cell .sme-icon:before {\n          display: inline-block;\n          font-size: 10px;\n          line-height: 30px;\n          margin-right: 3px;\n          margin-top: 0;\n      }\n    "],"template":"\n      <div *ngIf=\"showHeader\" class=\"header sme-focus-zone\" #header [ngClass]=\"{'is-scrolled':isScrolledDown, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'show-left-margin':showLeftMargin, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <table #headerTable class=\"sme-table-virtualized\" [attr.aria-labelledby]=\"tableAriaLabelledBy\" [attr.aria-rowcount]=\"renderedItems.length\"\n              [attr.aria-colcount]=\"columns.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n              <thead>\n                  <tr tabindex=\"0\">\n                      <th class=\"first\">\n                          <div class=\"datatable-checkbox\" *ngIf=\"selectionMode==='multiple'\">\n                              <input type=\"checkbox\" [checked]=\"shouldAllItemCheckBoxChecked()\" (change)=\"onAllItemCheckBoxClicked()\" />\n                              <label></label>\n                          </div>\n                      </th>\n                      <th tabindex=\"0\" *ngFor=\"let column of columns\" (click)=\"clickColumn(column)\" [hidden]=\"column===groupColumn\" [ngStyle]=\"{'width':column.width}\"\n                          class=\"{{column.styleClass}}\" [attr.aria-sort]=\"getAriaSortAttributeValue(column)\">\n                          <span class=\"columnName\">{{column.header}}</span>\n                          <span class=\"sortIcon sme-icon\" [ngClass]=\"{'sme-icon-up':column.sortMode===sortModeEnum.Ascend,'sme-icon-down':column.sortMode===sortModeEnum.Descend}\"></span>\n                      </th>\n                  </tr>\n              </thead>\n          </table>\n      </div>\n      <div class=\"content sme-focus-zone\" #content [ngClass]=\"{'is-busy':isBusy, 'has-multiple-selection':selectionMode==='multiple', 'selectable': selectable, 'no-header':!showHeader, 'show-left-margin':showLeftMargin, 'tree':showAsTree, 'show-grid':showGrid, 'show-all-item-checkbox': selectionMode==='multiple' && showAllItemCheckbox}\">\n          <div class=\"loading-indicator\" *ngIf=\"isBusy\">\n              <sme-loading-wheel></sme-loading-wheel>\n          </div>\n          <div class=\"scroll-container\" [ngClass]=\"{'sme-layout-absolute sme-position-inset-none': scrollable, 'should-scroll': shouldScroll}\"\n              #scrollContainer>\n              <div class=\"item no-data\" *ngIf=\"renderedItems.length===0 && !lazyLoad\">\n                  <div class=\"prefix sme-table-cell\">&nbsp;</div>\n                  <div class=\"sme-table-cell\">{{getPlaceholderMessage()}}</div>\n              </div>\n              <div class=\"scroll-body\" #scrollBody>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollAboveData>\n                      <tbody>\n                          <tr *ngFor=\"let renderedItem of renderedItemsAboveViewPort; let rowIndex = index\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || column===groupColumn\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">\n                                      {{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <table class=\"scroll-data sme-table-virtualized\" #scrollData [attr.aria-rowcount]=\"renderedItems.length\" [attr.role]=\"showAsTree?(showHeader?'treegrid':'tree'):undefined\">\n                      <tbody>\n                          <tr (keydown)=\"onContentTablePressed($event)\" *ngFor=\"let renderedItem of renderedItemsInAndBelowViewPort; let rowIndex = index\"\n                              (click)=\"selectItem($event, renderedItem)\" class=\"item data\" [ngClass]=\"{selected: renderedItem.index === getActiveRenderedItemIndex(),'group-item': renderedItem.type === renderedItemTypeEnum.GroupItem,'group-header': renderedItem.type === renderedItemTypeEnum.GroupHeader,checked: isItemSelected(renderedItem)}\"\n                              [attr.tabindex]=\"renderedItem.index >=0 ? 0 : undefined\" (dblclick)=\"doubleClickRow($event,renderedItem)\"\n                              (focus)=\"onContentItemFocused($event)\" (focusin)=\"onContentItemFocused($event)\" (focusout)=\"onContentItemBlurred($event)\"\n                              [attr.data-rendered-item-index]=\"renderedItem.index\" [attr.aria-rowindex]=\"renderedItem.index\" [attr.aria-selected]=\"isItemSelected(renderedItem) ?'true': undefined\"\n                              role=\"row\" [attr.aria-expanded]=\"getAriaExpandedAttributeValue(renderedItem)\">\n                              <td class=\"first\">\n                                  <div class=\"sme-table-cell\">\n                                      <div *ngIf=\"!showAsTree\" class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td *ngFor=\"let column of columns; let colIndex=index\" [attr.colspan]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0)?(columns.length-1):1\"\n                                  [hidden]=\"(renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex>0) || (renderedItem.type!=renderedItemTypeEnum.GroupHeader && column===groupColumn)\"\n                                  [ngClass]=\"{'first-data-column': isFirstDataColumn(column)}\" [ngStyle]=\"{'width':column.width}\" class=\"{{column.styleClass}}\">\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.GroupHeader && colIndex===0\" class=\"sme-table-cell\" (click)=\"clickGroupToggle(renderedItem)\">\n                                      <span *ngIf=\"useGroupToggle\" class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':isGroupExpanded(renderedItem.data), 'sme-icon-chevronRight':!isGroupExpanded(renderedItem.data)}\"></span>\n                                      <span *ngIf=\"!this.groupHeaderTemplate\">\n                                          {{renderedItem.data}}\n                                      </span>\n                                      <span *ngIf=\"this.groupHeaderTemplate\">\n                                          <sme-data-table-template-loader [template]=\"this.groupHeaderTemplate\" [data]=\"renderedItem.data\"></sme-data-table-template-loader>\n                                      </span>\n                                  </div>\n                                  <div *ngIf=\"renderedItem.type===renderedItemTypeEnum.TreeNode && colIndex===0\" class=\"sme-table-expander-cell\" [ngStyle]=\"{'padding-left':(renderedItem.depth*16+4)+'px'}\"\n                                      [ngClass]=\"{'has-children': renderedItem.hasChildren || !renderedItem.node.isLeaf}\">\n                                      <span class=\"sme-icon\" [ngClass]=\"{'sme-icon-chevronDown':renderedItem.node.expanded, 'sme-icon-chevronRight':!renderedItem.node.expanded}\"\n                                          (click)=\"clickTreeToggle(renderedItem)\"></span>\n                                      <span class=\"placeholder\"></span>\n                                  </div>\n                                  <div *ngIf=\"showAsTree && selectionMode==='multiple' && renderedItem.type==renderedItemTypeEnum.TreeNode && colIndex==0\"\n                                      class=\"sme-table-cell datatable-checkbox-container\">\n                                      <div class=\"datatable-checkbox\">\n                                          <input type=\"checkbox\" [checked]=\"isItemSelected(renderedItem)\" (change)=\"onItemCheckBoxClicked(renderedItem)\" />\n                                          <label></label>\n                                      </div>\n                                  </div>\n                                  <div *ngIf=\"!column.bodyTemplate && renderedItem.type!=renderedItemTypeEnum.GroupHeader\" class=\"sme-table-cell\">{{renderedItem.data?resolveObjectPath(renderedItem.data,column.field):'.'}}</div>\n                                  <div *ngIf=\"renderedItem.type!=renderedItemTypeEnum.GroupHeader && renderedItem.data && column.bodyTemplate\" class=\"sme-table-cell\">\n                                      <sme-data-table-template-loader [template]=\"column.bodyTemplate\" [data]=\"renderedItem.data\" [rowIndex]=\"rowIndex\"></sme-data-table-template-loader>\n                                  </div>\n                              </td>\n                          </tr>\n                          <tr class=\"item\" #tempRow>\n                              <td>\n                                  <div class=\"sme-table-cell\">&nbsp;</div>\n                              </td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </div>\n              <div #lastFocusableShadowElement class=\"sme-focus-zone last-focusable-shadow-element\" (focus)=\"onLastFocusableShadowElementFocused($event)\" tabindex=\"0\"></div>\n          </div>\n      </div>\n    "}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional"}},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject"},"arguments":["layout"]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"},{"__symbolic":"reference","module":"@angular/core","name":"NgZone"},{"__symbolic":"reference","module":"../common/interfaces","name":"Layout"}]}]}}}}]