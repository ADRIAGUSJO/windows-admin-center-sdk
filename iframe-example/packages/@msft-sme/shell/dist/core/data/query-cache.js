import { Observable, ReplaySubject, Subject } from 'rxjs';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
/**
 * Query Cache class.
 * - Create a cache entry by "create" call with creator object.
 * - Subscribe with options to get query result.
 * - Refresh data on-demand and interval.
 * - Dispose the resource when it's done.
 * - Recover and re-subscribe with the same handlers if necessary after an error.
 *
 * TData the data type of observable responds.
 * TParams the options parameters to pass the creator to create new observable.
 */
var QueryCache = /** @class */ (function () {
    /**
     * Initializes a new instance of the QueryCache.
     *
     * @param create the function to create a new observable with specified parameters.
     * @param serializeParams the function to generate serialized string from specified parameters. (optional)
     * @param destroy the function to clean up any residue after all reference was gone. (optional)
     */
    function QueryCache(create, serializeParams, destroy) {
        this.create = create;
        this.serializeParams = serializeParams;
        this.destroy = destroy;
    }
    /**
     * Create or return the cached observable.
     *
     * @param autoFetchOptions the options parameter auto-fetch when subscribe is called.
     * @return Observable<TData> the observable object.
     */
    QueryCache.prototype.createObservable = function (autoFetchOptions) {
        var _this = this;
        // for recovery scenario, this.cachedData.subscribers is retained.
        // clear them here if no publish ever made.
        if (this.cachedData && this.cachedData.publish) {
            if (autoFetchOptions) {
                // schedule the fetch immediately after current call stack.
                setTimeout(function () { return _this.fetch(autoFetchOptions); });
            }
            return this.cachedData.publish;
        }
        var fetch = new Subject();
        var refresh = new Subject();
        var apply = new Subject();
        var subscribers = [];
        var publish = this.createPublishObservable(fetch, refresh, apply, subscribers);
        this.cachedData = { fetch: fetch, refresh: refresh, publish: publish, apply: apply, subscribers: subscribers };
        this.autoFetchOptions = autoFetchOptions;
        return publish;
    };
    /**
     * Unsubscribe any remained subscribers and dispose all remained resources.
     * - clearCache() is not necessary to be called if all subscriptions are unsubscribe'ed properly.
     */
    QueryCache.prototype.clearCache = function () {
        if (!this.cachedData) {
            return;
        }
        if (this.cachedData.subscribers) {
            var tempSubscribers = this.cachedData.subscribers.slice(0);
            for (var _i = 0, tempSubscribers_1 = tempSubscribers; _i < tempSubscribers_1.length; _i++) {
                var context = tempSubscribers_1[_i];
                context.subscription.unsubscribe();
            }
        }
        this.cleanup(false);
    };
    /**
     * Fetch with new query options.
     * - The fetch starts new query when cache is empty, current cache doesn't match the key generated by
     *   serializedParams function which was configured at the constructor, interval was changed (ex.
     *   changing zero interval to active interval or other way around), or the first subscriber like when
     *   delayClean comes back active subscription.
     *
     * @param options the options with interval, delay clean, recovery and parameters.
     */
    QueryCache.prototype.fetch = function (options) {
        if (!this.cachedData) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheFetchOrder.message;
            Logging.log({ level: LogLevel.Error, source: 'QueryCache', message: message });
            throw new Error(message);
        }
        if (this.cachedData.fetch) {
            // send new request when cache doesn't match the key, interval was changed, or single subscriber.
            var key = this.serializeParams ? this.serializeParams(options.params) : '';
            if (!this.options
                || this.key !== key
                || this.options.interval !== options.interval
                || this.cachedData.subscribers.length === 1) {
                this.key = key;
                this.cachedData.fetch.next(options);
            }
        }
        else {
            Logging.log({
                level: LogLevel.Warning,
                source: 'QueryCache',
                message: MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheFetchErrorOnce.message
            });
        }
    };
    /**
     * Refresh the query cache with last options and parameters provided on the fetch call.
     */
    QueryCache.prototype.refresh = function () {
        if (!this.cachedData) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheRefreshOrder.message;
            Logging.log({ level: LogLevel.Error, source: 'QueryCache', message: message });
            throw new Error(message);
        }
        if (this.cachedData.refresh) {
            this.cachedData.refresh.next();
        }
        else {
            Logging.log({
                level: LogLevel.Warning,
                source: 'QueryCache',
                message: MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheRefreshErrorOnce.message
            });
        }
    };
    /**
     * Recover the observable and subscription.
     * - Recover can be used to resubscribe when the observable got any error situation. The observable would
     *   be unsubscribed state when it got an error response, this function allows to resubscribe without
     *   recreate observable and subscription.
     *
     * @param autoFetch if true auto fetch after re-subscribed.
     */
    QueryCache.prototype.recover = function (autoFetch) {
        if (!this.cachedData) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheRecoverNoCachedResource.message;
            Logging.log({ level: LogLevel.Error, source: 'QueryCache', message: message });
            throw new Error(message);
        }
        if (!this.options || !this.options.enableRecovery) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.QueryCacheRecoverMissingRecoveryOption.message;
            Logging.log({ level: LogLevel.Error, source: 'QueryCache', message: message });
            throw new Error(message);
        }
        var tempCachedData = this.cachedData;
        if (tempCachedData.refresh) {
            tempCachedData.refresh.complete();
        }
        if (tempCachedData.fetch) {
            tempCachedData.fetch.complete();
        }
        if (tempCachedData.apply) {
            tempCachedData.apply.complete();
        }
        for (var _i = 0, _a = this.cachedData.subscribers; _i < _a.length; _i++) {
            var context = _a[_i];
            // call original unsubscribe function.
            context.subscription.unsubscribe();
        }
        // recreate new publish observable and subscribe to original set of handlers.
        var tempSubscribers = this.cachedData.subscribers.slice(0);
        var fetch = new Subject();
        var refresh = new Subject();
        var apply = new Subject();
        var subscribers = [];
        var publish = this.createPublishObservable(fetch, refresh, apply, subscribers);
        this.cachedData = { fetch: fetch, refresh: refresh, publish: publish, apply: apply, subscribers: subscribers };
        for (var _b = 0, tempSubscribers_2 = tempSubscribers; _b < tempSubscribers_2.length; _b++) {
            var context = tempSubscribers_2[_b];
            this.cachedData.publish.subscribe(context.next, context.error, context.complete, context.subscription);
        }
        if (autoFetch) {
            fetch.next(this.options);
        }
        else {
            this.options = null;
        }
    };
    /**
     * Apply instant data to the query cache. The data will be delivered to the subscriber immediately.
     *
     * @param data the data to apply to the replay.
     */
    QueryCache.prototype.apply = function (data) {
        if (this.cachedData.apply) {
            this.cachedData.apply.next(data);
        }
    };
    QueryCache.prototype.createPublishObservable = function (fetch, refresh, apply, subscribers) {
        var _this = this;
        var publish = 
        // start data query when new fetch is requested.
        fetch
            .switchMap(function (options) {
            // remember last options.
            _this.options = options;
            // merge output from expand-delay object and refresh object.
            return Observable.merge(
            // submit initial query.
            _this.create(options.params)
                .expand(function (result, index) {
                if (!options.interval || options.interval <= 0) {
                    // stop the interval delay.
                    return Observable.empty();
                }
                // return new observable after the delay.
                return Observable.of(result)
                    .delay(options.interval)
                    .switchMap(function () { return _this.create(options.params); });
            }), 
            // refresh to trigger new observable.
            refresh.switchMap(function () { return _this.create(options.params); }), 
            // apply data.
            apply);
        })
            .multicast(new ReplaySubject(1))
            .refCount();
        // override subscribe call to keep track subscription.
        publish.subscribe = (function (next, error, complete, recoverSubscription) {
            if (_this.delayTimer) {
                clearTimeout(_this.delayTimer);
                _this.delayTimer = null;
                if (_this.options && _this.options.interval) {
                    _this.options.interval = null;
                }
            }
            // override default handler with No-OP call if not set.
            // this allows all subscribe call to be get called when an error reported.            
            next = next || MsftSme.noop;
            error = error || MsftSme.noop;
            var context = { next: next, error: error, complete: complete, errorCount: 0, unsubscribeCount: 0 };
            var hookError = function (errorData) {
                context.errorCount++;
                error(errorData);
            };
            context.subscription = Object.getPrototypeOf(publish).subscribe.call(publish, next, hookError, complete);
            // hook up old subscription so old subscriber can unsubscribe properly.
            if (recoverSubscription) {
                recoverSubscription.unsubscribe = function () { return context.subscription.unsubscribe(); };
            }
            // add internal unsubscribe to the original subscription.
            context.subscription.add(_this.internalUnsubscribe.bind(_this, context));
            subscribers.push(context);
            // if createObservable() is called with autoFetchOptions, it start fetching data immediately when subscribe() is called.
            if (_this.autoFetchOptions) {
                _this.fetch(_this.autoFetchOptions);
                _this.autoFetchOptions = null;
            }
            return context.subscription;
        });
        return publish;
    };
    QueryCache.prototype.internalUnsubscribe = function (context) {
        var _this = this;
        context.unsubscribeCount++;
        if (context.unsubscribeCount > 1) {
            // ignore if it's called twice and more.
            return;
        }
        if (!this.cachedData) {
            return;
        }
        var options = this.options || {};
        if (options.enableRecovery) {
            // indicating normal unsubscribe call, so delete it.
            if (context.errorCount === 0) {
                var contextIndex = this.cachedData.subscribers.indexOf(context);
                if (contextIndex >= 0) {
                    this.cachedData.subscribers.splice(contextIndex, 1);
                }
            }
            // on the recovery mode, retains all subscriber context, and don't clean up.
            // if there no active subscription, make cleanup call. 
            var findAny = this.cachedData.subscribers.find(function (item) { return !item.subscription.closed; });
            if (!findAny) {
                if (options.delayClean) {
                    this.delayTimer = setTimeout(function () {
                        _this.cleanup(true);
                        _this.delayTimer = null;
                    }, QueryCache.delayTime);
                }
                else {
                    this.cleanup(true);
                }
            }
            return;
        }
        // non recovery mode.
        var index = this.cachedData.subscribers.indexOf(context);
        if (index >= 0) {
            this.cachedData.subscribers.splice(index, 1);
        }
        if (this.cachedData.subscribers.length === 0) {
            if (options.delayClean) {
                this.delayTimer = setTimeout(function () {
                    _this.cleanup(false);
                    _this.delayTimer = null;
                }, QueryCache.delayTime);
            }
            else {
                this.cleanup(false);
            }
        }
    };
    QueryCache.prototype.cleanup = function (recovery) {
        if (!this.cachedData) {
            return;
        }
        if (this.cachedData.fetch) {
            this.cachedData.fetch.complete();
            this.cachedData.fetch = null;
        }
        if (this.cachedData.refresh) {
            this.cachedData.refresh.complete();
            this.cachedData.refresh = null;
        }
        if (this.cachedData.apply) {
            this.cachedData.apply.complete();
            this.cachedData.apply = null;
        }
        this.cachedData.publish = null;
        this.key = null;
        // on recovery cleanup, retain subscribers and options.
        if (!recovery) {
            this.cachedData.subscribers = null;
            this.cachedData = null;
            this.options = null;
        }
        if (this.destroy) {
            this.destroy();
        }
    };
    /**
     * Delay clean up time (10 seconds)
     */
    QueryCache.delayTime = 10 * 1000;
    return QueryCache;
}());
export { QueryCache };
//# sourceMappingURL=data:application/json;base64,