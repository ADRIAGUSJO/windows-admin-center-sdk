"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResJsonConverter = /** @class */ (function () {
    function ResJsonConverter(options) {
        this.options = options;
    }
    ResJsonConverter.prototype.contentReset = function () {
        this.outputDt = '';
        this.outputTs = '';
        this.outputInterface = '';
        this.outputJson = {};
        this.jsonCurrent = this.outputJson;
    };
    ResJsonConverter.prototype.contentAddDt = function (line) {
        this.outputDt += line;
        return line;
    };
    ResJsonConverter.prototype.contentAddTs = function (line) {
        this.outputTs += line;
        return line;
    };
    ResJsonConverter.prototype.contentAddIt = function (line) {
        this.outputInterface += line;
        return line;
    };
    ResJsonConverter.prototype.jsonNewValue = function (name) {
        var old = this.jsonCurrent;
        var json = {};
        this.jsonCurrent[name] = json;
        this.jsonCurrent = json;
        return old;
    };
    ResJsonConverter.prototype.jsonAddValue = function (name, value) {
        this.jsonCurrent[name] = value;
    };
    ResJsonConverter.prototype.scan = function (node) {
        var current = node;
        var keyItems = [];
        var dataItems = [];
        for (var itemKey in current) {
            if (current.hasOwnProperty(itemKey)) {
                var itemValue = current[itemKey];
                if (typeof itemValue === 'object') {
                    keyItems.push({ name: itemKey, value: itemValue });
                }
                else if (typeof itemValue === 'string') {
                    dataItems.push({ name: itemKey, value: itemValue });
                }
            }
        }
        return {
            keyItems: keyItems,
            dataItems: dataItems
        };
    };
    ResJsonConverter.prototype.traverse = function (keyItems, indent) {
        var indentSpace = '\t';
        var indentName = '';
        for (var i = 0; i < indent; i++) {
            indentName += indentSpace;
        }
        var indentValue = indentName + indentSpace;
        if (keyItems.length > 0) {
            for (var _i = 0, keyItems_1 = keyItems; _i < keyItems_1.length; _i++) {
                var item = keyItems_1[_i];
                if (indent === 0) {
                    this.contentAddDt('// Autogenerated by "gulp-resjson". Do not manually edit.\r\n');
                    this.contentAddTs('// Autogenerated by "gulp-resjson". Do not manually edit.\r\n');
                    this.contentAddIt('// Autogenerated by "gulp-resjson". Do not manually edit.\r\n');
                    this.contentAddDt('/* tslint:disable */\r\n');
                    this.contentAddTs('/* tslint:disable */\r\n');
                    this.contentAddIt('/* tslint:disable */\r\n');
                    this.contentAddDt('export declare module ' + item.name + ' {\r\n');
                    this.contentAddTs('export module ' + item.name + ' {\r\n    \'use strict\';\r\n');
                    this.contentAddIt('export interface ' + item.name + ' {\r\n');
                }
                else {
                    this.contentAddDt(indentName + 'module ' + item.name + ' {\r\n');
                    this.contentAddTs(indentName + 'export module ' + item.name + ' {\r\n');
                    this.contentAddIt(indentName + item.name + ': {\r\n');
                }
                var jsonOld = this.jsonNewValue(item.name);
                var results = this.scan(item.value);
                for (var _a = 0, _b = results.dataItems; _a < _b.length; _a++) {
                    var item2 = _b[_a];
                    this.contentAddDt(indentValue + 'const ' + item2.name + ': string;\r\n');
                    this.contentAddTs(indentValue + 'export const ' + item2.name + ' = \'' + item2.value + '\';\r\n');
                    this.contentAddIt(indentValue + item2.name + ': string;\r\n');
                    this.jsonAddValue(item2.name, item2.value);
                }
                this.traverse(results.keyItems, ++indent);
                this.jsonCurrent = jsonOld;
                this.contentAddDt(indentName + '}\r\n');
                this.contentAddTs(indentName + '}\r\n');
                this.contentAddIt(indentName + '};\r\n');
            }
        }
    };
    ResJsonConverter.prototype.convert = function (content) {
        var root = {};
        // Remove comments, /* multilinecomment*/ and // one line comment and "//": "JSON element comment"
        content = content.replace(/(\/\*([^*]|[\n]|(\*+([^*/]|[\n])))*\*\/+)|( +\/\/.*)|(  +\"\/\/\".*)/g, '');
        var data = JSON.parse(content);
        var itemKeys = Object.keys(data);
        // build a data tree.
        for (var _i = 0, itemKeys_1 = itemKeys; _i < itemKeys_1.length; _i++) {
            var itemKey = itemKeys_1[_i];
            // remove localization comments
            if (itemKey.startsWith('//') || (itemKey.startsWith('_') && itemKey.endsWith('.comment'))) {
                continue;
            }
            var current = root;
            var itemValue = data[itemKey];
            var keys = itemKey.split('_');
            var count = keys.length;
            for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
                var key = keys_1[_a];
                count--;
                if (count > 0) {
                    if (!current.hasOwnProperty(key)) {
                        current[key] = {};
                    }
                    current = current[key];
                    if (typeof current !== 'object') {
                        throw new Error('Resource key already exists: ' + itemKey);
                    }
                }
                else {
                    current[key] = itemValue;
                }
            }
        }
        this.contentReset();
        this.traverse([{ name: 'Strings', value: root }], 0);
    };
    return ResJsonConverter;
}());
exports.ResJsonConverter = ResJsonConverter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ndWxwcy9ndWxwLXJlc2pzb24vcmVzanNvbi1jb252ZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBc0JBO0lBNkdJLDBCQUFvQixPQUFnQjtRQUFoQixZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ3BDLENBQUM7SUF2R08sdUNBQVksR0FBcEI7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdkMsQ0FBQztJQUVPLHVDQUFZLEdBQXBCLFVBQXFCLElBQVk7UUFDN0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8sdUNBQVksR0FBcEIsVUFBcUIsSUFBWTtRQUM3QixJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTyx1Q0FBWSxHQUFwQixVQUFxQixJQUFZO1FBQzdCLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVPLHVDQUFZLEdBQXBCLFVBQXFCLElBQVk7UUFDN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMzQixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUV4QixNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQztJ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WSxVQUFJLEVBQUosYUFBSSxFQUFKLGtCQUFJLEVBQUosSUFBSTtnQkFBZixJQUFJLEdBQUcsYUFBQTtnQkFDUixLQUFLLEVBQUUsQ0FBQztnQkFDUixFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUN0QixDQUFDO29CQUVELE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBRXZCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLEdBQUcsT0FBTyxDQUFDLENBQUM7b0JBQy9ELENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO2dCQUM3QixDQUFDO2FBQ0o7U0FDSjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDTCx1QkFBQztBQUFELENBdkpBLEFBdUpDLElBQUE7QUF2SlksNENBQWdCIiwiZmlsZSI6Imd1bHBzL2d1bHAtcmVzanNvbi9yZXNqc29uLWNvbnZlcnQuanMiLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJzb3VyY2VSb290IjoiQzpcXEJBXFw0MTdcXHMifQ==
