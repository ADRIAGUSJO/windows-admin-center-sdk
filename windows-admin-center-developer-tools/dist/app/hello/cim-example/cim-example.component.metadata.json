[{"__symbolic":"module","version":3,"metadata":{"CimExampleComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-cim-example","template":"\n      <sme-loading-wheel *ngIf=\"loading\"></sme-loading-wheel>\n      <sme-split-view #sv>\n        <sme-split-view-content>\n            <sme-master-view>\n                <div class=\"stretch-absolute flex-layout vertical\">\n                    <sme-tool-header>Processes via WMI call</sme-tool-header>\n                    <div class=\"overflow-margins table-indent\">\n                      This component provides a short overview / example on how to execute a CIM / WMI call and wait for the resulting dataset.\n                      On return, the results are loaded into a data grid that has a fixed height, and is sortable on the \"name\" column.\n                      In future updates, this component will contain examples on how to use the selection mode to view a datagrid item's\n                      details inside the SME Details control.\n                    </div>\n                    <div class=\"sme-layout-relative sme-position-flex-auto\">\n                      <div class=\"sme-layout-relative sme-position-flex-auto\">\n                        <sme-data-table #smeDataTable [items]=\"processes\" style=\"height: 300px;\" class=\"sme-layout-absolute sme-position-inset-none\" [defaultSortColumn]=\"customSortColumn\" [defaultSortMode]=\"1\">\n                          <sme-data-table-column field=\"name\" header=\"name\" sortable=\"true\" width=\"10%\"></sme-data-table-column>\n                          <!-- <sme-data-table-column  #customSortColumn  field=\"commandLine\" header=\"exe\" sortable=\"true\">\n                            <ng-template let-data>\n                              <span class=\"status-icon sme-icon sme-icon-cluster\"></span>\n                              <strong>{{data|json}}</strong>\n                              <input style=\"width:60px\" />\n                          </ng-template>\n                          </sme-data-table-column> -->\n                          <sme-data-table-column field=\"cpuPercent\" header=\"CPU %\" sortable=\"true\">\n                            <ng-template let-data>\n                              <!-- <span class=\"status-icon sme-icon sme-icon-cluster\"></span> -->\n                              <strong>{{data.cpuPercent}}</strong>\n                              <!-- <button onclick=\"alert('Hello~~~')\">I'm a button. I need focus.</button> -->\n                            </ng-template>\n                          </sme-data-table-column>\n                          <sme-data-table-column field=\"executablePath\" header=\"Path\" sortable=\"true\"></sme-data-table-column>\n                        </sme-data-table>\n                      </div>\n                    </div>\n                  </div>\n              </sme-master-view>\n        </sme-split-view-content>\n        <sme-split-view-pane>\n            <button *ngIf=\"!sv.isExpanded\" (click)=\"sv.togglePane()\">{{ strings.HelloWorld.cim.viewCode }}</button>\n            <button *ngIf=\"sv.isExpanded\" (click)=\"sv.togglePane()\">{{ strings.HelloWorld.cim.hideCode }}</button>\n            <div *ngIf=\"sv.isExpanded\">\n              The presentation layer utilizes Honolulu's custom data grid control.  The code looks like this:\n              <pre>\n                <code>\n                    &lt;sme-data-table #simpleDataTable [items]=\"dataSource\" [(selection)]=\"selectedData1\" class=\"sme-layout-absolute sme-position-inset-none\" [defaultSortColumn]=\"customSortColumn\" [defaultSortMode]=\"1\"&gt;\n                  &lt;sme-data-table-column field=\"process\" header=\"id\" sortable=\"true\" width=\"10%\"&gt;&lt;/sme-data-table-column&gt;\n                  &lt;sme-data-table-column  #customSortColumn  field=\"name\" header=\"name\" sortable=\"true\"&gt;\n                    &lt;ng-template let-data&gt;\n                      &lt;span class=\"status-icon sme-icon sme-icon-cluster\"&gt;&lt;/span&gt;\n                      &lt;strong&gt;{{ '{' }}{{ '{' }}data.name{{ '}' }}{{ '}' }}&lt;/strong&gt;\n                      &lt;input style=\"width:60px\" /&gt;\n                  &lt;/ng-template&gt;\n                  &lt;/sme-data-table-column&gt;\n                  &lt;sme-data-table-column field=\"cpuPercent\" header=\"CPU %\" sortable=\"true\"&gt;\n                    &lt;ng-template let-data&gt;\n                      &lt;span class=\"status-icon sme-icon sme-icon-cluster\"&gt;&lt;/span&gt;\n                      &lt;strong&gt;{{ '{' }}{{ '{' }}data.cpuPercent{{ '}' }}{{ '}' }}&lt;/strong&gt;\n                      &lt;button onclick=\"alert('Hello~~~')\"&gt;I'm a button. I need focus.&lt;/button&gt;\n                    &lt;/ng-template&gt;\n                  &lt;/sme-data-table-column&gt;\n                &lt;/sme-data-table&gt;\n                </code>\n              </pre>\n              <br />\n              Using the Data Table requires that we import the DataTableModule in the parent module (in this case hello.module.ts).\n              <pre>\n                <code>\n      ...\n      imports: [\n        ActionsModule,\n        AlertBarModule,\n        CommonModule,\n        <span style=\"background-color: yellow;\">DataTableModule,</span>\n        DetailsModule,\n        FormsModule,\n        LoadingWheelModule,\n        SmeStylesModule,\n        SvgModule,\n        routing,\n        ToolHeaderModule,\n        TreeTableModule,\n        SplitViewModule,\n        MasterViewModule\n      ]\n                </code>\n              </pre>\n              <br />\n              <br />\n              The data table is then filled with the results from a WMI call (CIM).  Full code can be found in the file: /src/app/hello/cim-example/cim-example.component.ts.\n            </div>\n            <!-- <button (click)=\"sv.togglePane()\">Click me to toggle the pane</button>\n            <p>I'm the pane. The pane is the area that grows/shrinks.</p>\n            <p>The pane takes as much room as it needs.</p>\n            <p><b>isExpanded</b>: {{sv.isExpanded}}</p>\n            <p *ngIf=\"sv.isExpanded\">You can only see this because the pane is expanded. Because this string is longer, you'll see the pane grow when I appear.\n            </p> -->\n        </sme-split-view-pane>\n      </sme-split-view>\n    ","styles":["\n\n    "]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@msft-sme/shell/angular","name":"AppContextService"},{"__symbolic":"reference","module":"../hello.service","name":"HelloService"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"onRowSelect":[{"__symbolic":"method"}],"getProcesses":[{"__symbolic":"method"}],"refresh":[{"__symbolic":"method"}]},"statics":{"navigationTitle":{"__symbolic":"function","parameters":["appContextService","snapshot"],"value":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"MsftSme"},"member":"resourcesStrings"}},"member":"HelloWorld"},"member":"cim"},"member":"title"}}}}}},{"__symbolic":"module","version":1,"metadata":{"CimExampleComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-cim-example","template":"\n      <sme-loading-wheel *ngIf=\"loading\"></sme-loading-wheel>\n      <sme-split-view #sv>\n        <sme-split-view-content>\n            <sme-master-view>\n                <div class=\"stretch-absolute flex-layout vertical\">\n                    <sme-tool-header>Processes via WMI call</sme-tool-header>\n                    <div class=\"overflow-margins table-indent\">\n                      This component provides a short overview / example on how to execute a CIM / WMI call and wait for the resulting dataset.\n                      On return, the results are loaded into a data grid that has a fixed height, and is sortable on the \"name\" column.\n                      In future updates, this component will contain examples on how to use the selection mode to view a datagrid item's\n                      details inside the SME Details control.\n                    </div>\n                    <div class=\"sme-layout-relative sme-position-flex-auto\">\n                      <div class=\"sme-layout-relative sme-position-flex-auto\">\n                        <sme-data-table #smeDataTable [items]=\"processes\" style=\"height: 300px;\" class=\"sme-layout-absolute sme-position-inset-none\" [defaultSortColumn]=\"customSortColumn\" [defaultSortMode]=\"1\">\n                          <sme-data-table-column field=\"name\" header=\"name\" sortable=\"true\" width=\"10%\"></sme-data-table-column>\n                          <!-- <sme-data-table-column  #customSortColumn  field=\"commandLine\" header=\"exe\" sortable=\"true\">\n                            <ng-template let-data>\n                              <span class=\"status-icon sme-icon sme-icon-cluster\"></span>\n                              <strong>{{data|json}}</strong>\n                              <input style=\"width:60px\" />\n                          </ng-template>\n                          </sme-data-table-column> -->\n                          <sme-data-table-column field=\"cpuPercent\" header=\"CPU %\" sortable=\"true\">\n                            <ng-template let-data>\n                              <!-- <span class=\"status-icon sme-icon sme-icon-cluster\"></span> -->\n                              <strong>{{data.cpuPercent}}</strong>\n                              <!-- <button onclick=\"alert('Hello~~~')\">I'm a button. I need focus.</button> -->\n                            </ng-template>\n                          </sme-data-table-column>\n                          <sme-data-table-column field=\"executablePath\" header=\"Path\" sortable=\"true\"></sme-data-table-column>\n                        </sme-data-table>\n                      </div>\n                    </div>\n                  </div>\n              </sme-master-view>\n        </sme-split-view-content>\n        <sme-split-view-pane>\n            <button *ngIf=\"!sv.isExpanded\" (click)=\"sv.togglePane()\">{{ strings.HelloWorld.cim.viewCode }}</button>\n            <button *ngIf=\"sv.isExpanded\" (click)=\"sv.togglePane()\">{{ strings.HelloWorld.cim.hideCode }}</button>\n            <div *ngIf=\"sv.isExpanded\">\n              The presentation layer utilizes Honolulu's custom data grid control.  The code looks like this:\n              <pre>\n                <code>\n                    &lt;sme-data-table #simpleDataTable [items]=\"dataSource\" [(selection)]=\"selectedData1\" class=\"sme-layout-absolute sme-position-inset-none\" [defaultSortColumn]=\"customSortColumn\" [defaultSortMode]=\"1\"&gt;\n                  &lt;sme-data-table-column field=\"process\" header=\"id\" sortable=\"true\" width=\"10%\"&gt;&lt;/sme-data-table-column&gt;\n                  &lt;sme-data-table-column  #customSortColumn  field=\"name\" header=\"name\" sortable=\"true\"&gt;\n                    &lt;ng-template let-data&gt;\n                      &lt;span class=\"status-icon sme-icon sme-icon-cluster\"&gt;&lt;/span&gt;\n                      &lt;strong&gt;{{ '{' }}{{ '{' }}data.name{{ '}' }}{{ '}' }}&lt;/strong&gt;\n                      &lt;input style=\"width:60px\" /&gt;\n                  &lt;/ng-template&gt;\n                  &lt;/sme-data-table-column&gt;\n                  &lt;sme-data-table-column field=\"cpuPercent\" header=\"CPU %\" sortable=\"true\"&gt;\n                    &lt;ng-template let-data&gt;\n                      &lt;span class=\"status-icon sme-icon sme-icon-cluster\"&gt;&lt;/span&gt;\n                      &lt;strong&gt;{{ '{' }}{{ '{' }}data.cpuPercent{{ '}' }}{{ '}' }}&lt;/strong&gt;\n                      &lt;button onclick=\"alert('Hello~~~')\"&gt;I'm a button. I need focus.&lt;/button&gt;\n                    &lt;/ng-template&gt;\n                  &lt;/sme-data-table-column&gt;\n                &lt;/sme-data-table&gt;\n                </code>\n              </pre>\n              <br />\n              Using the Data Table requires that we import the DataTableModule in the parent module (in this case hello.module.ts).\n              <pre>\n                <code>\n      ...\n      imports: [\n        ActionsModule,\n        AlertBarModule,\n        CommonModule,\n        <span style=\"background-color: yellow;\">DataTableModule,</span>\n        DetailsModule,\n        FormsModule,\n        LoadingWheelModule,\n        SmeStylesModule,\n        SvgModule,\n        routing,\n        ToolHeaderModule,\n        TreeTableModule,\n        SplitViewModule,\n        MasterViewModule\n      ]\n                </code>\n              </pre>\n              <br />\n              <br />\n              The data table is then filled with the results from a WMI call (CIM).  Full code can be found in the file: /src/app/hello/cim-example/cim-example.component.ts.\n            </div>\n            <!-- <button (click)=\"sv.togglePane()\">Click me to toggle the pane</button>\n            <p>I'm the pane. The pane is the area that grows/shrinks.</p>\n            <p>The pane takes as much room as it needs.</p>\n            <p><b>isExpanded</b>: {{sv.isExpanded}}</p>\n            <p *ngIf=\"sv.isExpanded\">You can only see this because the pane is expanded. Because this string is longer, you'll see the pane grow when I appear.\n            </p> -->\n        </sme-split-view-pane>\n      </sme-split-view>\n    ","styles":["\n\n    "]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@msft-sme/shell/angular","name":"AppContextService"},{"__symbolic":"reference","module":"../hello.service","name":"HelloService"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"onRowSelect":[{"__symbolic":"method"}],"getProcesses":[{"__symbolic":"method"}],"refresh":[{"__symbolic":"method"}]},"statics":{"navigationTitle":{"__symbolic":"function","parameters":["appContextService","snapshot"],"value":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"MsftSme"},"member":"resourcesStrings"}},"member":"HelloWorld"},"member":"cim"},"member":"title"}}}}}}]