/* tslint:disable */
'use strict';
/**
 * @file Source code generated by gulp-sme-classify.
 * @version 0.13.0
 */
export var PowerShellScripts;
(function (PowerShellScripts) {
    PowerShellScripts.Get_ClusterInventory = '##Get-ClusterInventory##\n\n$result = New-Object PSObject\n$clusterCmdsInstalledOnThisNode = $false;\nif (Get-Command "Get-Cluster" -ErrorAction SilentlyContinue) {\n$clusterCmdsInstalledOnThisNode = $true;\n}\nif (-Not $clusterCmdsInstalledOnThisNode) {\n$error = New-Object PSObject\n$result | Add-Member -MemberType NoteProperty -Name \u0027ErrorCode\u0027 -Value \u0027MissingClusterCmdlets\u0027\nreturn result;\n}\n$cluster = Get-CimInstance -Namespace root/mscluster MSCluster_Cluster\n$clusterFqdn = $cluster.fqdn\n$clusterNodes = Get-ClusterNode | Select-Object DrainStatus, DynamicWeight, Name, NodeWeight, FaultDomain, State\n$clusterNodeMap = @{}\nforeach ($clusterNode in $clusterNodes) {\n$clusterNodeName = $clusterNode.Name;\n$clusterNodeFqdn = ([System.Net.Dns]::GetHostByName($clusterNodeName)).HostName;\n$clusterNodeResult = New-Object PSObject;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027Fqdn\u0027 -Value $clusterNodeFqdn;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027Name\u0027 -Value $clusterNodeName;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027DrainStatus\u0027 -Value $clusterNode.DrainStatus;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027DynamicWeight\u0027 -Value $clusterNode.DynamicWeight;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027NodeWeight\u0027 -Value $clusterNode.NodeWeight;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027FaultDomain\u0027 -Value $clusterNode.FaultDomain;\n$clusterNodeResult | Add-Member -MemberType NoteProperty -Name \u0027State\u0027 -Value $clusterNode.State;\n$clusterNodeMap.Add($clusterNodeName, $clusterNodeResult);\n}\n$result | Add-Member -MemberType NoteProperty -Name \u0027Fqdn\u0027 -Value $clusterFqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027NodeMap\u0027 -Value $clusterNodeMap\n$result';
    PowerShellScripts.Get_ServerInventory = '##Get-ServerInventory##\n\n$isAdministrator = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")\n$operatingSystem = Get-CimInstance Win32_OperatingSystem\n$computerSystem = Get-CimInstance Win32_ComputerSystem\n$computerName = $computerSystem.DNSHostName\nif ($computerName -eq $null) {\n$computerName = $computerSystem.Name\n}\n$fqdn = ([System.Net.Dns]::GetHostByName($computerName)).HostName\n$namespaces = Get-CimInstance -Namespace root/microsoft/windows -ClassName __NAMESPACE\n$managementToolsAvailable  = ($namespaces | Where-Object { $_.Name -ieq "ManagementTools" -or $_Name -ieq "ManagementTools2" }) -ne $null\n$serverManagerAvailable = ($namespaces | Where-Object { $_.Name -ieq "ServerManager" }) -ne $null\n$isCluster = $false\n$clusterCmdlet = $false\n$clusterHealthCmdlet = $false\n$clusterFqdn = $null\n$isWmfInstalled = $false\n$operatingSystemVersion = $OperatingSystem.Version;\n$windows2016Version = [Version]\u002710.0\u0027;\n$windows2012Version = [Version]\u00276.2\u0027;\nif ($operatingSystemVersion -ge $windows2016Version) {\n$isWmfInstalled = $true;\n} elseif ($operatingSystemVersion -ge $windows2012Version) {\n$registryKey = \u0027HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowerShellEngine\u0027;\n$registryKeyValue = Get-ItemProperty -Path $registryKey -Name PowerShellVersion -ErrorAction SilentlyContinue;\nif ($registryKeyValue -and ($registryKeyValue.Length -ne 0)) {\n$installedWmfVersion = [Version]$registryKeyValue.PowerShellVersion;\nif ($installedWmfVersion -ge [Version]\u00275.0\u0027) {\n$isWmfInstalled = $true;\n}\n}\n}\ntry {\n$cluster = Get-CimInstance -Namespace root/mscluster MSCluster_Cluster -ErrorAction Stop\n$isCluster = $true\n$clusterFqdn = $cluster.fqdn\n$clusterNodesMap = @{}\n$clusterNodes = Get-CimInstance -Namespace root/mscluster MSCluster_Node -ErrorAction Stop\nforeach ($clusterNode in $clusterNodes) {\nif ($clusterNode.State -eq 0 -or $clusterNode.State -eq 2) {\n$clusterNodeName = $clusterNode.Name\n$clusterNodeNameFqdn = ([System.Net.Dns]::GetHostByName($clusterNodeName)).HostName\n$clusterNodesMap.Add($clusterNodeName.ToLower(), $clusterNodeNameFqdn)\n}\n}\nif (Get-Command -Name "Get-Cluster" -ErrorAction SilentlyContinue) {\n$clusterCmdlet = $true\nif (Get-Command -Name "Get-HealthFault" -ErrorAction SilentlyContinue) {\n$clusterHealthCmdlet = $true\n}\n}\n} catch {\n}\n$result = New-Object PSObject\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsAdministrator\u0027 -Value $isAdministrator\n$result | Add-Member -MemberType NoteProperty -Name \u0027OperatingSystem\u0027 -Value $operatingSystem\n$result | Add-Member -MemberType NoteProperty -Name \u0027ComputerSystem\u0027 -Value $computerSystem\n$result | Add-Member -MemberType NoteProperty -Name \u0027Fqdn\u0027 -Value $fqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsManagementToolsAvailable\u0027 -Value $managementToolsAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsServerManagerAvailable\u0027 -Value $serverManagerAvailable\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsCluster\u0027 -Value $isCluster\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsClusterCmdletAvailable\u0027 -Value $clusterCmdlet\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsClusterHealthCmdletAvailable\u0027 -Value $clusterHealthCmdlet\n$result | Add-Member -MemberType NoteProperty -Name \u0027ClusterFqdn\u0027 -Value $clusterFqdn\n$result | Add-Member -MemberType NoteProperty -Name \u0027ClusterNodesMap\u0027 -Value $clusterNodesMap\n$result | Add-Member -MemberType NoteProperty -Name \u0027IsWmfInstalled\u0027 -Value $isWmfInstalled\n$result';
})(PowerShellScripts || (PowerShellScripts = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlZC9wb3dlcnNoZWxsLXNjcmlwdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLFlBQVksQ0FBQTtBQUNaOzs7R0FHRztBQUVILE1BQU0sS0FBUSxpQkFBaUIsQ0FHOUI7QUFIRCxXQUFjLGlCQUFpQjtJQUNqQixzQ0FBb0IsR0FBVyw0NERBQTQ0RCxDQUFBO0lBQzM2RCxxQ0FBbUIsR0FBVyxvc0hBQW9zSCxDQUFBO0FBQ2h2SCxDQUFDLEVBSGEsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUc5QiIsImZpbGUiOiJwb3dlcnNoZWxsLXNjcmlwdHMuanMiLCJzb3VyY2VSb290IjoiQzovQkEvMTMxL3MvaW5saW5lU3JjLyJ9